<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 RVM 切換 Rails 版本</title>
      <link href="/2019/11/rvm-switch-rails-version/"/>
      <url>/2019/11/rvm-switch-rails-version/</url>
      
        <content type="html"><![CDATA[<p>為了回顧一下做專案的手感，想說來玩一下rails 6.0.0，好了。<br>結果做到一半發現…我建立的專案版本竟然是rails 5.2.3!?</p><p>花了段時間喚醒之前的記憶，印象中之前的確是升級過了，但是當下為了製作專案，<br>我把rails 6.0.0 直接解除安裝，重新安裝回 5.2.3  …</p><p>原來如此啊!!(真是個笨蛋啊…)</p><p>花了點時間，總算是找到解決方案了：</p><a id="more"></a><ul><li>首先，確認自己所使用的 ruby 版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br><span class="line">=&gt; ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]</span><br></pre></td></tr></table></figure>或是設定本機使用的預設版本 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm --default use 2.6.3</span><br></pre></td></tr></table></figure></li></ul><p>Q.為什麼需要設成deafault?<br>A.因為接下來我們要建立的 gemset 是綁定在特定 ruby 版本底下的。</p><hr><ul><li><p>建立gemset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ rvm 2.6.3</span><br><span class="line">$ gem install rails -v 6.0.0</span><br><span class="line"></span><br><span class="line">$ rvm gemset create r600 r523</span><br><span class="line">Gemset &apos;r600&apos; created.</span><br><span class="line">Gemset &apos;r523&apos; created.</span><br><span class="line"></span><br><span class="line">$ rvm 2.6.3@r600</span><br><span class="line">$ gem install rails -v 6.0.0</span><br><span class="line"></span><br><span class="line">$ rvm 2.6.3@r523</span><br><span class="line">$ gem install rails -v 5.2.3</span><br></pre></td></tr></table></figure></li><li><p>設定完成之後，用法也很簡單：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ rvm 2.6.3@r523 ; rails --version</span><br><span class="line"></span><br><span class="line">Rails 5.2.3</span><br><span class="line"></span><br><span class="line">$ rvm 2.6.3@r600 ; rails --version</span><br><span class="line"></span><br><span class="line">Rails 6.0.0</span><br><span class="line"></span><br><span class="line">$ rvm use 2.6.3@r600 --default</span><br></pre></td></tr></table></figure></li></ul><p>好啦，繼續練手感去…</p><p>參考資料：</p><p><a href="https://kaochenlong.com/2011/04/08/rvm-and-gemsets/" target="_blank" rel="noopener">RVM and Gemsets</a><br><a href="https://developpaper.com/using-rvm-to-control-switching-ruby-rails-version/" target="_blank" rel="noopener">Using RVM to Control Switching Ruby/Rails Version</a><br><a href="https://rvm.io/gemsets/basics" target="_blank" rel="noopener">Named Gem Sets</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> RVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從 Ruby 看 JS 的 事件監聽機制</title>
      <link href="/2019/10/event-listener/"/>
      <url>/2019/10/event-listener/</url>
      
        <content type="html"><![CDATA[<p>一直都被JS的事件監聽機制弄得暈頭轉向的，<br>好不容易有機會有這個範例，看不懂也要先紀錄下來啊XDD</p><a id="more"></a><h1 id="從-Ruby-看-JS-的-事件監聽機制"><a href="#從-Ruby-看-JS-的-事件監聽機制" class="headerlink" title="從 Ruby 看 JS 的 事件監聽機制"></a>從 Ruby 看 JS 的 事件監聽機制</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">trigger</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">evt = EventEmitter.new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 無註冊事件</span></span><br><span class="line">evt.trigger(<span class="string">'hello'</span>)              <span class="comment"># 無任何輸出結果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 註冊一個事件</span></span><br><span class="line">evt.on(<span class="string">'marry_me'</span>) &#123; puts <span class="string">'好'</span> &#125;</span><br><span class="line">evt.trigger(<span class="string">'marry_him'</span>)          <span class="comment"># 無任何輸出結果</span></span><br><span class="line">evt.trigger(<span class="string">'marry_me'</span>)           <span class="comment"># 印出「好」</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重複註冊事件</span></span><br><span class="line">evt.on(<span class="string">'5xruby'</span>) &#123; puts <span class="string">'五倍'</span> &#125;</span><br><span class="line">evt.on(<span class="string">'5xruby'</span>) &#123; puts <span class="string">'紅寶石'</span> &#125;</span><br><span class="line">evt.on(<span class="string">'5xruby'</span>) &#123; puts <span class="string">'愛你喔'</span> &#125;</span><br><span class="line"></span><br><span class="line">evt.trigger(<span class="string">'5xruby'</span>) <span class="comment"># 依序在畫面上印出「五倍」「紅寶石」「愛你喔」字樣</span></span><br></pre></td></tr></table></figure><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><ul><li>trigger 這個方法會接收一個參數<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evt.trigger(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>==改寫 trigger method==</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger</span><span class="params">(key)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><ul><li>on 這個方法不但會接收參數，還附帶一個block<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evt.on(<span class="string">'marry_me'</span>) &#123; puts <span class="string">'好'</span> &#125;</span><br></pre></td></tr></table></figure>==改寫 on method==<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(key, &amp;block)</span></span></span><br><span class="line">    p block <span class="comment">#Use it to watch what happened</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">evt.on(<span class="string">'marry_me'</span>) &#123; puts <span class="string">'好'</span> &#125;</span><br><span class="line">evt.trigger(<span class="string">'marry_him'</span>)        <span class="comment"># 無任何輸出結果</span></span><br><span class="line">evt.trigger(<span class="string">'marry_me'</span>)         <span class="comment"># 印出「好」</span></span><br></pre></td></tr></table></figure><p>因為希望key 和 block 能以key-value pair的方式儲存，<br>所以在 initialize 的時候建立一個空的 Hash 來存放</p><p>==add initialize method==</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">   @event_list = &#123;&#125;   </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(key, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">trigger</span><span class="params">(key)</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>==on method 加入判斷式==</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(key, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">if</span> @event_list.has_key?(key)</span><br><span class="line">  <span class="comment"># 如果<span class="doctag">@event</span>_list裡已經有接收到的 key</span></span><br><span class="line">    @event_list[key] &lt;&lt;  block</span><br><span class="line">  <span class="comment">#  [block] &lt;&lt; block  </span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="comment"># 如果<span class="doctag">@event</span>_list裡  沒有接收到的 key</span></span><br><span class="line">    @event_list[key] = [block]</span><br><span class="line">  <span class="comment">#  將block以陣列的形式存入Hash &#123;key: [block]&#125;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  p @event_list <span class="comment">#Use it to watch what happened</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>==trigger method 加入判斷式==</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger</span><span class="params">(key)</span></span></span><br><span class="line">  <span class="keyword">if</span> @event_list.has_key?(key)</span><br><span class="line">  <span class="comment">#如果<span class="doctag">@event</span>_list裡已經有接收到的 key     </span></span><br><span class="line">    @event_list[key].each <span class="keyword">do</span> <span class="params">|event|</span></span><br><span class="line">    <span class="comment">#<span class="doctag">@event</span>_list[key] = [block] 是個 Array </span></span><br><span class="line">      event.call</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Finished"><a href="#Finished" class="headerlink" title="Finished"></a>Finished</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @event_list = &#123;&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(key, &amp;block)</span></span></span><br><span class="line">    <span class="keyword">if</span> @event_list.has_key?(key)</span><br><span class="line">      @event_list[key] &lt;&lt; block</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      @event_list[key] = [block]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">trigger</span><span class="params">(key)</span></span></span><br><span class="line">    <span class="keyword">if</span> @event_list.has_key?(key)</span><br><span class="line">      @event_list[key].each <span class="keyword">do</span> <span class="params">|event|</span></span><br><span class="line">          event.call</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="如果和block不熟的話…"><a href="#如果和block不熟的話…" class="headerlink" title="如果和block不熟的話…"></a>如果和block不熟的話…</h2><p><a href="https://www.youtube.com/watch?v=92yuNm6Ts0c" target="_blank" rel="noopener">3 Practical Examples Of Ruby Blocks</a><br><a href="https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/" target="_blank" rel="noopener">Ruby blocks, procs &amp; lambdas.</a><br><a href="https://mixandgo.com/learn/mastering-ruby-blocks-in-less-than-5-minutes" target="_blank" rel="noopener">Ruby Block</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Note </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day19 &quot;%&quot;和 &quot;sprintf&quot; in Ruby?</title>
      <link href="/2019/10/sprintf/"/>
      <url>/2019/10/sprintf/</url>
      
        <content type="html"><![CDATA[<p>僅記錄在找 format string in Ruby 時，對 % 和sprintf<br>產生的疑問和查詢的過程。</p><p>首先，從Ruby 的官方文件開始：</p><h2 id=""><a href="#" class="headerlink" title="%"></a>%</h2><blockquote><p>Format - Uses str as a format specification, and returns the result of applying it to arg. If the format specification contains more than one substitution, then arg must be an Array or Hash containing the values to be substituted. See Kernel::sprintf for details of the format string.</p></blockquote><a id="more"></a><hr><p>老樣子，英文字太多，就分段一個一個來：</p><ol><li>Uses str as a <strong>format specification</strong>, and returns the <strong>result</strong> of applying it to <strong>arg</strong>.</li><li>If the <strong>format specification</strong> contains more than one substitution, then <strong>arg</strong> must be an Array or Hash containing the values to be substituted.</li><li>See <strong>Kernel::sprintf</strong> for details of the format string.</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"%05d"</span> % <span class="number">123</span>                              <span class="comment">#=&gt; "00123"</span></span><br><span class="line"><span class="string">"%-5s: %016x"</span> % [ <span class="string">"ID"</span>, <span class="keyword">self</span>.object_id ]  <span class="comment">#=&gt; "ID   : 00002b054ec93168"</span></span><br><span class="line"><span class="string">"foo = %&#123;foo&#125;"</span> % &#123; <span class="symbol">:foo</span> =&gt; <span class="string">'bar'</span> &#125;        <span class="comment">#=&gt; "foo = bar"</span></span><br><span class="line"></span><br><span class="line">str % arg   <span class="comment">#=&gt; result</span></span><br><span class="line"></span><br><span class="line">“format specification” % arg( as target )   <span class="comment">#=&gt; result( what you expect to )</span></span><br><span class="line"></span><br><span class="line">格式規範 % arg                             <span class="comment">#=&gt;   結果</span></span><br></pre></td></tr></table></figure><p>所以，％是用來格式化文字的，會依據妳所使用的 format specification (格式規範)。<br>很好，新的問題來了：什麼是 format specification？有哪些 type？</p><hr><p> 要回答上面的問題之前，得先在進步查一下<code>Kernel::sprintf</code>在API裡寫了什麼：</p><h2 id="sprintf-args-public"><a href="#sprintf-args-public" class="headerlink" title="sprintf(*args) public"></a>sprintf(*args) public</h2><blockquote><p>Returns the string resulting from applying format_string to any additional arguments. Within the format string, any characters other than format sequences are copied to the result.<br>The syntax of a format sequence is follows.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[flags][width][.precision]type</span><br></pre></td></tr></table></figure><blockquote><p>A format sequence consists of a percent sign, followed by optional flags, width, and precision indicators, then terminated with a field type character. The field type controls how the corresponding sprintf argument is to be interpreted, while the flags modify that interpretation.</p></blockquote><p>姆姆，果然是這樣，和我想的一樣呢!<del>說人話啊渾球！！</del><br>為了方便理解和查詢，姑且稍微整理一下吧！</p><ul><li>常見的類型</li></ul><table><thead><tr><th>Field type</th><th><strong>Integer Format</strong></th><th>請給我中文</th></tr></thead><tbody><tr><td>b (or B)</td><td>binary number</td><td>2進位數字</td></tr><tr><td><strong>d (or i or u)</strong></td><td>decimal number</td><td>10進位數字</td></tr><tr><td>o</td><td>octal number</td><td>8進位數字</td></tr><tr><td>x (or X)</td><td>hexadecimal number</td><td>16進位數字</td></tr></tbody></table><table><thead><tr><th>Field type</th><th><strong>Float Format</strong></th><th>請給我中文</th></tr></thead><tbody><tr><td>e(or E)</td><td>exponential notation</td><td>科學計算表示</td></tr><tr><td><strong>f</strong></td><td>float</td><td>浮點數</td></tr></tbody></table><table><thead><tr><th>Field type</th><th><strong>Other Format</strong></th><th>請給我中文</th></tr></thead><tbody><tr><td><strong>s</strong></td><td>string</td><td>字串</td></tr></tbody></table><ul><li>flag 的範例：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#沒有設定flag</span></span><br><span class="line"><span class="string">"%d"</span> % <span class="number">123</span>  <span class="comment">#=&gt; "123"</span></span><br><span class="line"><span class="comment">#設定+作為flag</span></span><br><span class="line"><span class="string">"%+d"</span> % <span class="number">123</span> <span class="comment">#=&gt; "+123"</span></span><br><span class="line"><span class="comment">#設定 作為flag</span></span><br><span class="line"><span class="string">"% d"</span> % <span class="number">123</span> <span class="comment">#=&gt; " 123"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"%.0f"</span> % <span class="number">1234</span> <span class="comment">#=&gt; "1234"</span></span><br><span class="line"><span class="comment">#設定#作為flag，用來強制產生小數點</span></span><br><span class="line"><span class="string">"%#.0f"</span> % <span class="number">1234</span> <span class="comment">#=&gt; "1234."</span></span><br></pre></td></tr></table></figure><ul><li>width 的範例：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"%+20d"</span> % <span class="number">123</span>  <span class="comment">#=&gt; "                +123"</span></span><br><span class="line"><span class="string">"%-20d"</span> % <span class="number">123</span>  <span class="comment">#=&gt; "123                 "</span></span><br></pre></td></tr></table></figure><hr><p>大概就是這樣…<br>其實，直接看官方文件比較快的說…</p><p>啊哈哈哈，剛剛發現自己昨天鐵人賽的文章還放在草稿沒發出去時，<br>真想掐死昨天的自己啊…囧</p><p>嘛，雖然沒辦法連續30天發文，但還是要逼自己繼續下去。<br>鐵人賽，我會繼續撐下去的！！</p><p>參考資料：</p><p><a href="https://apidock.com/ruby/Kernel/sprintf" target="_blank" rel="noopener">sprintf</a><br><a href="https://ruby-doc.org/core-2.6.5/Kernel.html" target="_blank" rel="noopener">Kernel</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day18 鐵道裡的春天</title>
      <link href="/2019/10/spring-and-spring-stop/"/>
      <url>/2019/10/spring-and-spring-stop/</url>
      
        <content type="html"><![CDATA[<p>每次在建立新的專案的時候，終端機最後一段都會出現：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  run  bundle exec spring binstub --all</span><br><span class="line">* bin/<span class="symbol">rake:</span> Spring inserted</span><br><span class="line">* bin/<span class="symbol">rails:</span> Spring inserted</span><br></pre></td></tr></table></figure><p>又或者，常常在clone一個專案下來時：在執行db:migrate 或是 bundle install指令時卡住;<br>通常這時候，只要在終端機輸入<code>spring stop</code>，然後再重新執行前述指令，一切就能正常執行了。</p><h2 id="Spring-到底是什麼？"><a href="#Spring-到底是什麼？" class="headerlink" title="Spring 到底是什麼？"></a>Spring 到底是什麼？</h2><a id="more"></a><p>根據官方文件記載如下：</p><p>Spring 是在 Ruby on Rails 4.1 版時才加入<strong>應用程式預加載器</strong></p><blockquote><p>Spring 會預加載你的 Rails 應用程式。保持應用程式在背景執行，如此一來在執行 Rails 命令時：如跑測試、rake、migrate 時，不用每次都重啟 Rails 應用程式，加速你的開發流程。</p></blockquote><p>總而言之，就是讓開發人員能夠在寫code的時候，即時地在頁面上看到修改的成果。<br>真的是很貼心的設計呢！</p><p>打開你的Gemfile會看到，當你建立一個新的專案時，spring 已經被預設放在開發環境(development)裡了，<br>所以你可以直接執行<code>bundle</code>就可以啦！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...略...</span></span><br><span class="line">group <span class="symbol">:development</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Access an interactive console on exception pages or by calling 'console' anywhere in the code.</span></span><br><span class="line">  gem <span class="string">'web-console'</span>, <span class="string">'&gt;= 3.3.0'</span></span><br><span class="line">  gem <span class="string">'listen'</span>, <span class="string">'&gt;= 3.0.5'</span>, <span class="string">'&lt; 3.2'</span></span><br><span class="line">  <span class="comment"># Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring</span></span><br><span class="line">  gem <span class="string">'spring'</span></span><br><span class="line">  gem <span class="string">'spring-watcher-listen'</span>, <span class="string">'~&gt; 2.0.0'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># ...略...</span></span><br></pre></td></tr></table></figure><h2 id="Spring-的特色"><a href="#Spring-的特色" class="headerlink" title="Spring 的特色"></a>Spring 的特色</h2><p>那 Spring 有什麼特色呢？這次我們換來看看github上的資料吧！</p><ul><li>Totally automatic; no need to explicitly start and stop the background process</li><li>Reloads your application code on each run</li><li>Restarts your application when configs / initializers / gem dependencies are changed</li></ul><p>比較需要注意的是第三點：<br>雖然Spring會預先幫你載入專案內所有的東西，並且動態的讀取你寫入的程式碼，<br>但是當你修改是像設定檔之類的東西，就需要重新啟動server才有用。</p><h2 id="如何使用-Spring"><a href="#如何使用-Spring" class="headerlink" title="如何使用 Spring"></a>如何使用 Spring</h2><p>姆…這個部分，就請大家直接參考Spring頁面上的內容，<br>自己動手做一次吧！</p><p><a href="https://github.com/rails/spring/blob/master/README.md" target="_blank" rel="noopener">Spring</a><br><a href="https://rails.ruby.tw/4_1_release_notes.html" target="_blank" rel="noopener">Ruby on Rails 4.1 發佈記</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day17  如何實作搜索表單</title>
      <link href="/2019/10/search-from/"/>
      <url>/2019/10/search-from/</url>
      
        <content type="html"><![CDATA[<p>最近做專案，正好做到 搜尋的功能，<br>今天就稍微紀錄一下囉！</p><p>對先前的form 還有印象嗎？讓我們來快速複習一下：</p><p>預備知識：</p><ul><li>form_for ：配合Model所建立的表單(如：POST 或 EDIT)</li><li>form_tag ：不須配合Model技能建立的表單(如：這次要做的搜尋功能)</li></ul><a id="more"></a><hr><p>Step1. 建立搜尋表單。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/views/events/index.html.erb</span></span><br><span class="line">&lt;%= form_tag(events_path, <span class="symbol">:method</span> =&gt; <span class="string">"get"</span>) <span class="keyword">do</span> %&gt;</span><br><span class="line">&lt;%= text_field_tag <span class="symbol">:search</span> %&gt; </span><br><span class="line">&lt;%= submit_tag <span class="string">"Search"</span> ,<span class="symbol">:event_name</span> =&gt; <span class="literal">nil</span> ,<span class="class"><span class="keyword">class</span>: "<span class="title">but</span>-<span class="title">primary</span>"%&gt;</span></span><br></pre></td></tr></table></figure><ul><li>小叮嚀：events_path, :method =&gt; “get” 就是你搜尋結果要呈現的頁面，<pre><code>要依據你自己設定的routes去設定喔！</code></pre></li></ul><hr><p>Step2. 將參數[:search]加入到 EventsController 裡。<br>前面在表單裡填入的關鍵字將會被包在params中傳進來。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/events_controller.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventsController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @events = Event.all.search(params[<span class="symbol">:search</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>小技巧：如果想了解params[:search]是什麼，<pre><code>可以用 render 的方式來觀察喔！</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    <span class="comment">#<span class="doctag">@events</span> = Event.all.search(params[:search])</span></span><br><span class="line">    render <span class="symbol">html:</span> params[<span class="symbol">:search</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><hr><p>Step3. 在Event Model中建立一個search的方法。<br>針對在搜索表單中輸入的關鍵字將以search方法進行處理。<br>如果有一個與關鍵字匹配的用戶名，結果將顯示在頁面上。<br>如果沒有部分匹配的用戶名，則所有用戶名將顯示為所有列表。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app/models/event.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">search</span><span class="params">(search)</span></span> </span><br><span class="line">     <span class="keyword">if</span> search</span><br><span class="line">       where([<span class="string">'event_name LIKE ?'</span>, <span class="string">"%<span class="subst">#&#123;search&#125;</span>%"</span>]) <span class="comment">#</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       all </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>嗯，大概就是這樣啦！鐵人賽我們明天見！！</p><p>參考資料：<br><a href="https://medium.com/@yassimortensen/simple-search-form-in-rails-8483739e4042" target="_blank" rel="noopener">Simple Search Form in Rails</a><br><a href="https://medium.com/@zylberberg.jonathan/creating-a-search-form-in-rails-5-77fdef6be74d" target="_blank" rel="noopener">Creating A Search Form In Rails 5</a><br><a href="https://www.for-engineer.life/entry/rails-search-form/" target="_blank" rel="noopener">【rails入門】検索フォームを簡単に実装する方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day16 &amp;&amp; / and / | | / or</title>
      <link href="/2019/10/boolean-operator/"/>
      <url>/2019/10/boolean-operator/</url>
      
        <content type="html"><![CDATA[<p>從標題就開始鬼畫符是怎樣？</p><p>謀啦，這是今天要介紹的主角群啦！</p><p>這幾個邏輯運算子： <code>&amp;&amp;</code> <code>and</code> <code>||</code> <code>or</code></p><p>一開始都以為他們只是彼此的替身而已，殊不知，</p><h2 id="待誌姆洗憨郎所想A架尼甘單"><a href="#待誌姆洗憨郎所想A架尼甘單" class="headerlink" title="待誌姆洗憨郎所想A架尼甘單!!"></a>待誌姆洗憨郎所想A架尼甘單!!</h2><a id="more"></a><hr><p>打開irb來做個簡單的驗證：</p><p>首先很簡單的定義兩個變數：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">true</span></span><br><span class="line">b = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然後，一起來見證奇蹟的時刻：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c = a <span class="keyword">and</span> b</span><br><span class="line">=&gt; false</span><br><span class="line">c</span><br><span class="line">=&gt; true <span class="comment"># 噠拉！！見證奇蹟的時刻！！！</span></span><br><span class="line"></span><br><span class="line">d = a &amp;&amp; b</span><br><span class="line">=&gt; false</span><br><span class="line">d</span><br><span class="line">=&gt; false</span><br></pre></td></tr></table></figure><p>有注意到嗎？<code>and</code> 和 <code>&amp;&amp;</code> 看起來並不是完全相同的呢！</p><hr><h2 id="花生省魔術？"><a href="#花生省魔術？" class="headerlink" title="花生省魔術？"></a>花生省魔術？</h2><p>要了解上面的原因，得先知道下面這些概念：</p><ul><li><code>=</code> 和 <code>and</code> 相比，<code>=</code> 有比較高的優先權，</li><li><code>=</code> 和 <code>&amp;&amp;</code> 相比，<code>&amp;&amp;</code> 有比較高的優先權，</li></ul><p>姆…簡單的來說呢，上面的程式碼其實是這樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">((c = a) <span class="keyword">and</span> b) </span><br><span class="line">=&gt; false</span><br><span class="line">c</span><br><span class="line">=&gt; true <span class="comment"># 因為 = 有比較高的優先權，a 已經指派給 c 了，所以c 是 true 喔！</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(d = (a &amp;&amp; b))</span><br><span class="line">=&gt; false</span><br><span class="line">d</span><br><span class="line">=&gt; false <span class="comment"># 因為 &amp;&amp; 有比較高的優先權，所以d 才會是 false 喔！</span></span><br></pre></td></tr></table></figure><p>原來一切都是 Short-Circuit Evaluationy 做得好事，中文大概是翻作：<br>最短路徑評估。</p><blockquote><p>When the first argument of the AND function evaluates to false,<br>the overall value must be false;<br>and when the first argument of the OR function evaluates to true,<br>the overall value must be true.</p></blockquote><hr><p>順著上面的解釋，來看看 or </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">true || fun()  # true</span><br><span class="line">false || fun() # undefined method `fun&apos; for main:Object</span><br><span class="line"></span><br><span class="line">true or fun()  # true</span><br><span class="line">false or fun() # undefined method `fun&apos; for main:Object</span><br></pre></td></tr></table></figure><p>姆… 所以呢？</p><hr><h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><ol><li>盡量使用 &amp;&amp; 和 || 避免不必要的誤會或狀況發生。</li><li>把 and 看成 if ， or 看成 unless</li></ol><p>第一點比較好理解，第二點的話看看下面的範例，會比較有感覺吧：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span> <span class="keyword">if</span> result = <span class="number">2</span>.even?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以改寫成</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">2</span>.even? <span class="keyword">and</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cook_dinner() <span class="keyword">or</span> raise(RuntimeError, <span class="string">"Not in the mood."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以改寫成</span></span><br><span class="line"></span><br><span class="line">raise(RuntimeError, <span class="string">"Not in the mood."</span>) <span class="keyword">unless</span> cook_dinner()</span><br></pre></td></tr></table></figure><hr><p>大概就是這樣，腦袋鈍鈍的，就先這樣吧！<br>鐵人賽，我們明天見！！</p><p>參考資料：</p><p><a href="https://tingtinghsu.github.io/blog/articles/2018-10-16-day22_ruby_interview_questions_and_or.html#ruby%E7%B6%93%E5%85%B8%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE-22" target="_blank" rel="noopener">Day22 and 和 or 比較</a><br><a href="https://mixandgo.com/learn/understanding-boolean-operator-precedence-in-ruby" target="_blank" rel="noopener">Understanding Boolean Operator Precedence in Ruby</a><br><a href="https://rubyinrails.com/2014/01/30/difference-between-and-and-in-ruby/" target="_blank" rel="noopener">Difference between &amp;&amp; and and in Ruby</a><br><a href="https://motion-express.com/blog/20141007-ruby-code-double-pipe" target="_blank" rel="noopener">Ruby code整理系列 ||= 的使用</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day15 Model 之間的關聯</title>
      <link href="/2019/10/associations/"/>
      <url>/2019/10/associations/</url>
      
        <content type="html"><![CDATA[<p>在Rails中，Model之間的關聯(Associations)，最容易被誤解的就是：<br>在每個資料表做一些什麼設定，就可以讓這幾個資料表彼此產生連結。</p><p>其實在Rails中的關聯指的是：在 Model 層級的關係上，透過 Model 所提供的一些方法（如： has_one、has_many 或 belongs_to）搭配 Rails 的資料表慣例設定主鍵（Primary Key）及外部鍵（Foreign Key），讓這些資料表串在一起。並產生一些方便實用的語法讓我們可以操作資料庫。</p><p>比較常見的資料表關聯大致有以下三種：</p><ul><li>一對一</li><li>一對多</li><li>多對多</li></ul><hr><a id="more"></a><h1 id="一對一"><a href="#一對一" class="headerlink" title="一對一"></a>一對一</h1><p>如下圖，我們有兩個 Model: Owner 和 Store，<br><strong>每個 Owner 都有一間 Store</strong>，<strong>每間 Store 都屬於一個Owner</strong> 的ER圖，我們會畫成像下面這樣：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20190928/20116733BoliUhV5P6.png" alt="https://ithelp.ithome.com.tw/upload/images/20190928/20116733BoliUhV5P6.png"></p><p>首先用指令建立出model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails g model Owner name age:<span class="built_in">integer</span></span><br><span class="line">rails g model Store title address phone owner:references</span><br></pre></td></tr></table></figure><p>在建立Model後對owner.rb 和 store.rb兩個檔案進行關聯設定：</p><ul><li><p>has_one: (<strong>每個 Owner 都有一間 Store</strong>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/owner.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Owner</span> &lt; ApplicationRecord</span></span><br><span class="line">   has_one <span class="symbol">:store</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Owner 會因此得到一些新的方法：</p></li><li><p>store : 找出屬於 Owner 的 Store</p></li><li><p>store= : 將 Store 指派給 Owner</p></li><li><p>build_store : 由 Owner 的角度來建立 Store 資料，需搭配 save 才能將資料寫入資料庫。</p></li><li><p>create_store : 由 Owner 的角度來建立 Store 資料並直接寫入資料庫。</p></li><li><p>belongs_to: (<strong>每間 Store 都屬於一個Owner</strong>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/store.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> &lt; ApplicationRecord</span></span><br><span class="line">   belongs_to <span class="symbol">:owner</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Store 也會得到一些新的方法：</p></li><li><p>owner : 找出屬於 Store 的 Owner</p></li><li><p>owner= : 將 Owner 指派給 Store</p></li></ul><hr><h1 id="一對多"><a href="#一對多" class="headerlink" title="一對多"></a>一對多</h1><p>接下來讓我們加入新的Model Product<br><strong>每間 Store 都有很多 Product</strong>，<strong>每個 Product 都屬於一個 Store</strong> 的ER圖，我們會畫成像下面這樣：<br><img src="https://ithelp.ithome.com.tw/upload/images/20190928/20116733OLbUcrgb9g.png" alt="https://ithelp.ithome.com.tw/upload/images/20190928/20116733OLbUcrgb9g.png"></p><p>一樣，先用指令建立出model:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model Product name price:decimal description:text store:references</span><br></pre></td></tr></table></figure></p><ul><li><p>has_many: (*<em>每個 Store 都有很多 Product *</em>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/store.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> &lt; ApplicationRecord</span></span><br><span class="line">   belongs_to <span class="symbol">:owner</span></span><br><span class="line">   has_many <span class="symbol">:products</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Store 會因此得到一些新的方法：</p></li><li><p>products : 找出屬於 Store 的 Product</p></li><li><p>products= : 將 Product 指派給 Store，這時候要用陣列的方式來寫入資料喔！</p></li><li><p>build_store : 由 Store 的角度來建立 Product 資料，需搭配 save 才能將資料寫入資料庫。</p></li><li><p>create_store : 由 Store 的角度來建立 Product 資料並直接寫入資料庫。</p></li><li><p>belongs_to: (<strong>每間 Product 都屬於一個 Store</strong>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/product.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">   belongs_to <span class="symbol">:store</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這個部分和上面雷同，請請讀者自己嘗試看看吧！</p></li></ul><hr><h1 id="多對多"><a href="#多對多" class="headerlink" title="多對多"></a>多對多</h1><p>等等，<strong>每間 Store 都有很多 Product</strong>，<strong>每個 Product 都屬於一個 Store</strong>，有點不太對吧？<br>是的，的確不太正確應該是<strong>每間 Store 都有很多 Product</strong>，<strong>每個 Product 可以屬於多間 Store</strong>，才對。</p><p> 通常在建立多對多關聯時，我們會建立一個第三方的 Model來儲存雙方的資訊：<br><img src="https://ithelp.ithome.com.tw/upload/images/20190928/20116733qN4opYIrbj.png" alt="https://ithelp.ithome.com.tw/upload/images/20190928/20116733qN4opYIrbj.png"></p><p>已經很習慣了吧，先用指令建立出model:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model WareHouse store:references product:references</span><br></pre></td></tr></table></figure><ul><li><strong>每個 Warehouse 都屬於一個 Store</strong></li><li><strong>每個 Warehouse 都屬於一個 Product</strong><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/ware_house.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WareHouse</span> &lt; ApplicationRecord</span></span><br><span class="line">   belongs_to <span class="symbol">:store</span></span><br><span class="line">   belongs_to <span class="symbol">:product</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><p>這時候設定要分長兩個部分：<br>首先是：</p><ul><li>has_many :<strong>每間 Store 都有很多 Warehouse</strong><br>但其實我們在意的是，<strong>每間 Store 有多少 Product</strong></li><li>has_many(table_name, {through: :table_name })<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># app/models/store.rb</span><br><span class="line">  class Store &lt; ApplicationRecord</span><br><span class="line">    belongs_to :user</span><br><span class="line"></span><br><span class="line">    has_many :ware_houses</span><br><span class="line">    has_many :products, through: :ware_houses</span><br><span class="line">  end</span><br></pre></td></tr></table></figure></li></ul><p>這邊和上面一樣，也是要設定兩個部分：</p><ul><li>has_many :<strong>每個 Product 都有很多 Warehouse</strong></li><li>has_many(table_name, {through: :table_name })<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># app/models/product.rb</span><br><span class="line">  class Product &lt; ApplicationRecord</span><br><span class="line">    has_many :ware_houses</span><br><span class="line">    has_many :stores, through: :ware_houses</span><br><span class="line">  end</span><br></pre></td></tr></table></figure></li></ul><hr><p>大概是這樣，其他更進一步的使用方式，有機會再說吧！<br>鐵人賽，我們明天見！！</p><p>參考資料：</p><p><a href="https://guides.rubyonrails.org/association_basics.html" target="_blank" rel="noopener">RailsGuides</a><br><a href="https://railsbook.tw/chapters/18-model-relationship.html" target="_blank" rel="noopener">為你自己學Ruby on Rails</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day14 Active Record？可以說中文嗎？</title>
      <link href="/2019/10/active-record/"/>
      <url>/2019/10/active-record/</url>
      
        <content type="html"><![CDATA[<p>一開始聽到 Model/ORM/Active Record  這三個東西時，<br>我心裡的OS是：</p><p>“龍哥，可以請你說中文嗎？”<br>“什麼？！已經是中文了嗎？！” 囧…</p><p> 簡單來說Active Record是…</p><hr><h1 id="Active-Record"><a href="#Active-Record" class="headerlink" title="Active Record"></a>Active Record</h1><ul><li>Active Record 指的就是Rails MVC架構中的Ｍ， Model 。</li><li>ORM (Object Relational Mapping)，翻成中文叫物件關聯映射。<del>什麼鬼啦？</del></li><li>ORM框架 的主要特性是，讓我們可以使用程式語言(Ruby)去操作資料庫語言(SQL)。<a id="more"></a></li></ul><blockquote><blockquote><p>Active Record 就是透過ORM的概念建立起來的框架。</p></blockquote></blockquote><h2 id="Active-Record-主要的特性"><a href="#Active-Record-主要的特性" class="headerlink" title="Active Record 主要的特性"></a>Active Record 主要的特性</h2><ul><li>表示 Model 與資料。</li><li>表示 Model 之間的關係。</li><li>表示相關 Model 之間的繼承關係。</li><li>持久化資料存入資料庫的驗證。</li><li>以物件導向的風格操作資料庫。</li></ul><p>姆…有點難以理解？慢慢往下看吧！</p><hr><h1 id="ORM可以帶來什麼好處？"><a href="#ORM可以帶來什麼好處？" class="headerlink" title="ORM可以帶來什麼好處？"></a>ORM可以帶來什麼好處？</h1><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20190928/20116733WNxmlay1Hl.png" alt="https://ithelp.ithome.com.tw/upload/images/20190928/20116733WNxmlay1Hl.png"></p><p>上面這張圖在講的是一種常見的網路攻擊叫做 SQL injection，<br>就是在傳輸到網站伺服器裡的資料裡直接寫 SQL 語法，從而達到某些特定目的。<br>好一點就只是資料被竊取，狠一點，就像是圖片裡說的，直接刪除所有的資料。<br>而透過ORM的框架，我們可以避免這種慘劇的發生。</p><h2 id="Strong-Parameter"><a href="#Strong-Parameter" class="headerlink" title="Strong Parameter"></a>Strong Parameter</h2><p>還記得昨天介紹的表單(form)嗎？通常我們從 form 表單裡接收到的資料（data），rails會將這些data打包成一包<code>params</code> 來傳遞，但是這包 <code>params</code> 並不能直接拿來使用喔！<br>如果你這樣寫，是會噴出錯誤訊息的喔！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.create(params)</span><br></pre></td></tr></table></figure><p>這是rails 為了防範SQL injection所做的設計；<br>所我們必須改寫成下面這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean_params = params.require(:user).permit(:name, :gender, :email)</span><br><span class="line">user = User.create(clean_params)</span><br></pre></td></tr></table></figure><p>透過<code>require</code>和<code>permit</code>讓rails知道，我們是要讓哪些資料被存入資料庫；<br>這樣一來，資料才能順利地被寫入資料庫喔！</p><hr><h1 id="Active-Record-中的慣例勝於設定-COC"><a href="#Active-Record-中的慣例勝於設定-COC" class="headerlink" title="Active Record 中的慣例勝於設定(COC)"></a>Active Record 中的慣例勝於設定(COC)</h1><p>在rails裡，對Model的命名慣例是這樣的：</p><ul><li>資料表 - 複數形，由底線分隔多個單字。</li><li>Model 類別 - 單數形，第一個字母大寫。</li></ul><table><thead><tr><th>Model/class</th><th>檔案名稱</th><th>資料表/schema</th></tr></thead><tbody><tr><td>Cat</td><td>cat.rb</td><td>cats</td></tr><tr><td>Post</td><td>post.rb</td><td>posts</td></tr><tr><td>CartItem</td><td>cart_item.rb</td><td>cart_items</td></tr></tbody></table><p>像上面的例子，我們建立了一個 Model Cat，<br>這就是用慣例產生的樣子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; ActiveRecord::Base</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>當然，如果你真的不喜歡遵守COC，你也可以這樣做：</p><ul><li><p>想要修改對應的資料表，你可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  <span class="keyword">self</span>.table_name = <span class="string">"CAT"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>想要修改資料表的欄位，你可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  <span class="keyword">self</span>.primary_key = <span class="string">"cat_id"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p> 既然有了資料表，我們就可以對他進行基本的CRUD操作。<br> CRUD 是四種資料操作的簡稱：Create, Read, Update and Delete，<br> 分別是新增、讀取、更新與刪除。</p><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p> 新增資料的方式有兩種：</p><ul><li><p>create: 這種寫法，會將資料直接寫入資料庫。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.create(<span class="symbol">name:</span> <span class="string">"Vegeta"</span>, <span class="symbol">age:</span> <span class="number">35</span>)</span><br></pre></td></tr></table></figure></li><li><p>new: 只有建立資料，但是沒有被寫入資料庫。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user = User.new <span class="keyword">do</span> <span class="params">|u|</span></span><br><span class="line">    u.name = <span class="string">"Goku"</span></span><br><span class="line">    u.age = <span class="number">35</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">user.save</span><br></pre></td></tr></table></figure><p>需要搭配save方法，才會將資料寫入資料庫喔！</p><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>讀取資料的方法有很多，底下僅簡單列出一些：</p><ul><li>all : 幫你選出所有的資料。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#慣例上，如果選出來的資料會是多筆時，變數名稱我們會用複數來表示</span></span><br><span class="line">users = User.all</span><br></pre></td></tr></table></figure></li><li>find_b :  幫你選出符合條件的特定某一筆的資料。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.find_by(<span class="symbol">name:</span> <span class="string">'Vegeta'</span>)</span><br></pre></td></tr></table></figure></li><li>where : 幫你選出符合條件的特定多筆的資料。</li><li>order : 依照設定的條件進行排序。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.where(<span class="symbol">gender:</span> <span class="string">'male'</span>).order(<span class="symbol">age:</span> <span class="symbol">:desc</span>)</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2>更新資料也有兩種寫法：</li><li>先選出資料，修改資料，再寫入資料庫。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user = User.find_by(<span class="symbol">name:</span> <span class="string">'Vegeta'</span>)</span><br><span class="line">user.name = <span class="string">'Incha'</span></span><br><span class="line">user.save</span><br></pre></td></tr></table></figure></li><li>先選出資料，修改資料同時寫入資料庫。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = User.find_by(<span class="symbol">name:</span> <span class="string">'Vegeta'</span>)</span><br><span class="line">user.update(<span class="symbol">name:</span> <span class="string">'Incha'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><ul><li>destroy : 將資料從資料表中刪除。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = User.find_by(<span class="symbol">name:</span> <span class="string">'David'</span>)</span><br><span class="line">user.destroy</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h1><p>在建立資料時，有時我們會希望某些欄位有條件限制，在rails中，<br>我們可以透過設定 validation 來達到我們要的目的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span><br><span class="line">  validates <span class="symbol">:age</span>, <span class="symbol">numericality:</span> &#123; <span class="symbol">greater_than_or_equal_to:</span> <span class="number">0</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面寫的兩個validates，意思分別是：</p><ul><li>name 是必填欄位(<code>presence: true</code>)。</li><li>age  必須是數字(<code>numericality</code>)，而且必須大於或等於0(<code>{ greater_than_or_equal_to: 0 }</code>)。</li></ul><p>還是有點看不懂? validates 其實也是個方法:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validates(欄位, 條件)</span><br></pre></td></tr></table></figure><p>讓我們來還原上面那段真正的樣子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  validates(<span class="symbol">:name</span>, &#123;<span class="symbol">presence:</span> <span class="literal">true</span>&#125;)</span><br><span class="line">  validates(<span class="symbol">:age</span>, &#123;<span class="symbol">numericality:</span> &#123; <span class="symbol">greater_than_or_equal_to:</span> <span class="number">0</span> &#125;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這樣應該比較好理解一些了吧！</p><hr><p>今天對Active Record的介紹這邊啦！！<br>鐵人賽，我們明天再見！</p><p>參考資料：</p><p><a href="https://rails.ruby.tw/active_record_basics.html" target="_blank" rel="noopener">Active Redord - RailsGuides中文版</a><br><a href="https://guides.rubyonrails.org/active_record_basics.html" target="_blank" rel="noopener">Active Redord - RailsGuides</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day13 風馮諷form</title>
      <link href="/2019/10/form-for-and-form-with/"/>
      <url>/2019/10/form-for-and-form-with/</url>
      
        <content type="html"><![CDATA[<p>不論是哪種程式語言，都會很常用到表單（Form）。<br>今天就來簡單的介紹一下rails有哪些幫忙建立表單的幫手吧！<br>Let’s 走！</p><h1 id="起手式-form-tag"><a href="#起手式-form-tag" class="headerlink" title="起手式 form_tag"></a>起手式 form_tag</h1><p>據說，很久很久以前，是有在用 form_tag 這個語法建立form的,<br>通常是在沒有要使用特定 Model 時使用的。</p><p>只需要在erb檔案裡寫下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_tag <span class="keyword">do</span> %&gt;</span><br><span class="line">  This A Form</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><p>Rails 會自動幫你翻譯長出下面這串東西：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/member/show"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"UgefBstVew/QQcuSk7rmjCByQBSvHPfmENYM096Je0ltEY9ileVA0YCrS1NigCgI5Yv4R/dlIt5q85RxrTI3sg=="</span> /&gt;</span></span><br><span class="line">  This A Form</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>第一個 name 屬性為 utf8 的 input，強制瀏覽器正確採用表單指定的編碼。<br>第二個 name 屬性為 authenticity_token 的 input，<br>是 Rails 內建用來防止 CSRF (cross-site request forgery protection) 攻擊的安全機制。</p><h2 id="蝦米洗CSRF"><a href="#蝦米洗CSRF" class="headerlink" title="蝦米洗CSRF?"></a>蝦米洗CSRF?</h2><p>簡單來說就是：欺騙使用者的瀏覽器，讓其以使用者的名義執行操作。</p><hr><h1 id="form-for"><a href="#form-for" class="headerlink" title="form_for"></a>form_for</h1><p>接下來是 form_for，剛剛說 form_tag 是沒有配合特定Model在使用語法，<br>那當然就會有要配合特定 Model 物件的用法啦！</p><p>通常這時候，我們會在 Controller 裡，透過 Model 來建立物件：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app/controllers/products_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  @product = Product.new</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然後會在對應的erb檔裡，用form_for語法來建立表單：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app/views/products/nw.html.rb</span><br><span class="line">&lt;%= form_for(@product) <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  &lt;%= form.input <span class="symbol">:name</span> %&gt;</span><br><span class="line">  &lt;%= form.input <span class="symbol">:price</span> %&gt;</span><br><span class="line">  &lt;%= form.input <span class="symbol">:description</span> %&gt;</span><br><span class="line">  &lt;%= form.input <span class="symbol">:is_available</span> %&gt;</span><br><span class="line">  &lt;%= form.submit <span class="class"><span class="keyword">class</span>: '<span class="title">btn</span> <span class="title">btn</span>-<span class="title">success</span>' %&gt;</span></span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="form-with"><a href="#form-with" class="headerlink" title="form_with"></a>form_with</h1><p>很麻煩吶，一下子form_tag，一下子form_for的，<br>有木有懶人包，兩種情況都能使用的語法啊？！</p><p>有有有當然有:form_with就是Rails 5.1設計推出的新的語法：</p><p>沒有 Model 時候的 form_with</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">url:</span>posts_path <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  &lt;%= form.text_field <span class="symbol">:name</span> %&gt;</span><br><span class="line">  &lt;%= form.submit %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><p>有 Model 時候的 form_with</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">model:</span> @post <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  &lt;%= form.text_field <span class="symbol">:name</span> %&gt;</span><br><span class="line">  &lt;%= form.submit %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><hr><p>什麼？你說我還有很多細節沒有說？<br>說好是<strong>簡單介紹</strong>的吼!!</p><p>好啦，補一下參考資料。<br>就將，先來補個普拿疼去…</p><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">跨站請求偽造</a><br><a href="https://rails.ruby.tw/form_helpers.html#%E8%99%95%E7%90%86-model-%E7%89%A9%E4%BB%B6" target="_blank" rel="noopener">Action View 表單輔助方法</a><br><a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html" target="_blank" rel="noopener">FormHelper</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day12 利用Enum設定欄位資料</title>
      <link href="/2019/10/enum-with-column/"/>
      <url>/2019/10/enum-with-column/</url>
      
        <content type="html"><![CDATA[<p>最近在做專案，學到了用Enum來設定欄位資料的方式，就順手紀錄一下吧！</p><blockquote><p>Enum 讓我們在設定資料表的欄位時，可以用Integer，而不是用String來儲存。</p></blockquote><p>感受不出有什麼好處嗎？</p><p>讓我們來個小劇場吧！˙</p><p>對新手來說，當我們想建立一個 Model User，而且希望裡面有名字(name)和角色(role)時：<br>名字(name)不用說，當然是用字串來存放，那角色(role)呢？<br>如果有現在有角色總共可以分成： admin, teacher, student；</p><a id="more"></a><p>姆…看起來應該也是字串吧？<br>於是乎你建立的 migration 檔，大概會是長這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsers</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:users</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:name</span></span><br><span class="line">      t.string <span class="symbol">:role</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>上面這種做法是完全OK的，只是遇到狀況的時候會比較麻煩一點；<br>比如說，今天如果有人在建立資料的時候打錯字，<br>像是 <strong>abmin</strong>, <strong>teather</strong>, <strong>studant</strong>，<br>而資料也一時不察的被寫進資料庫！那就尷尬了…</p><p>為了避免這種狀況，Rails提供Enum這個方法來解決上述的問題。</p><p>首先，你要使用Enum設定的欄位值，必須要是Integer，<br>所以，先來建立一個migration檔修改欄位吧！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeRoleToIntegerInUsers</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    change_column <span class="symbol">:users</span>, <span class="symbol">:role</span>, <span class="symbol">:integer</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>接著，只要在Model底下User.rb檔裡，像下面這樣去修改</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line"></span><br><span class="line">  ＃加入下面這行  </span><br><span class="line">  enum <span class="symbol">role:</span> &#123; <span class="symbol">admin:</span> <span class="number">0</span>, <span class="symbol">teacher:</span> <span class="number">1</span>, <span class="symbol">student:</span><span class="number">2</span> &#125;</span><br><span class="line">  <span class="comment">#或是你也可以寫成這樣</span></span><br><span class="line">  <span class="comment">#enum role: [ :admin, :teacher, :student ]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>搭拉！兩三下就完成啦！！<br>如此一來，當我們在更新或是建立資料時，就多了許多方法可以用囉！<br>以rails console為例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u1 = User.find(1)</span><br><span class="line"></span><br><span class="line">u1.update(role: 1)</span><br><span class="line"></span><br><span class="line">u1.role</span><br><span class="line">=&gt; teacher</span><br></pre></td></tr></table></figure><p>不只是這樣而已，你還可以這樣用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">u1.teacher?</span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">u1.admin!</span><br><span class="line"></span><br><span class="line">u1.teacher?</span><br><span class="line">=&gt; <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">u1.role</span><br><span class="line">=&gt; admin</span><br></pre></td></tr></table></figure><p>泥砍砍，泥砍砍，是不是很方便很好用！<br>那麼今天的鐵人賽就先這樣啦！繼續趕專題去…ORZ</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day11 Gemfile</title>
      <link href="/2019/10/gemfile/"/>
      <url>/2019/10/gemfile/</url>
      
        <content type="html"><![CDATA[<p>今天就來簡單的介紹一下Gemfile吧！</p><h1 id="Gemfile"><a href="#Gemfile" class="headerlink" title="Gemfile"></a>Gemfile</h1><p>Gemfile 是 Rails 用來管理每個 application 要使用哪些 Gem 的檔案。<br>同時也是個紀錄，讓每份專案不論在哪裏被pull下來，都能根據Gemfile裡的紀錄，<br>來安裝對應的Gem，以期能達到相同的效果。</p><p>在專案裡的Gemfile大概是長這個樣子的：(以rails 5.2.3為例)</p><a id="more"></a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123; <span class="params">|repo|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo&#125;</span>.git"</span> &#125;</span><br><span class="line"></span><br><span class="line">ruby <span class="string">'2.6.3'</span></span><br><span class="line">gem <span class="string">'rails'</span>, <span class="string">'~&gt; 5.2.3'</span></span><br><span class="line">gem <span class="string">'sqlite3'</span></span><br><span class="line">gem <span class="string">'puma'</span>, <span class="string">'~&gt; 3.11'</span></span><br><span class="line"><span class="comment"># .....</span></span><br><span class="line">group <span class="symbol">:development</span>, <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'byebug'</span>, <span class="symbol">platforms:</span> [<span class="symbol">:mri</span>, <span class="symbol">:mingw</span>, <span class="symbol">:x64_mingw</span>]</span><br><span class="line">  gem <span class="string">'hirb-unicode'</span></span><br><span class="line">  gem <span class="string">'rspec-rails'</span>, <span class="string">'~&gt; 3.4'</span>, <span class="string">'&gt;= 3.4.2'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">group <span class="symbol">:development</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'web-console'</span>, <span class="string">'&gt;= 3.3.0'</span></span><br><span class="line">  gem <span class="string">'listen'</span>, <span class="string">'&gt;= 3.0.5'</span>, <span class="string">'&lt; 3.2'</span></span><br><span class="line">  gem <span class="string">'spring'</span></span><br><span class="line">  gem <span class="string">'spring-watcher-listen'</span>, <span class="string">'~&gt; 2.0.0'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">group <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'capybara'</span>, <span class="string">'&gt;= 2.15'</span></span><br><span class="line">  gem <span class="string">'selenium-webdriver'</span></span><br><span class="line">  gem <span class="string">'chromedriver-helper'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows does not include zoneinfo files, so bundle the tzinfo-data gem</span></span><br><span class="line">gem <span class="string">'tzinfo-data'</span>, <span class="symbol">platforms:</span> [<span class="symbol">:mingw</span>, <span class="symbol">:mswin</span>, <span class="symbol">:x64_mingw</span>, <span class="symbol">:jruby</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="What’s-inside"><a href="#What’s-inside" class="headerlink" title="What’s inside?"></a>What’s inside?</h1><p>下面我們就來介紹檔案裡面到底寫些什麼吧！</p><ul><li>這是在告訴Gemfile 要去哪裡去找到這些gems，預設都會是 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 這個來源。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">'https://rubygems.org’</span></span><br></pre></td></tr></table></figure></li><li>通常還會設置GitHub 的 URL  作為備用的來源。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git_source(<span class="symbol">:github</span>) &#123; <span class="params">|repo|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo&#125;</span>.git” &#125;</span></span><br></pre></td></tr></table></figure></li><li>這代表這個專案使用的ruby版本是2.6.3，rails的版本則是5.2.3；<br>你沒有看錯，rails 本身也是一個gem。<br>所以如果有心，也是可以pull一份下來研究裡面的source code的(<del>抖</del>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby &apos;2.6.3&apos;</span><br><span class="line">gem &apos;rails&apos;, &apos;~&gt; 5.2.3&apos;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如何安裝自己要用的Gem"><a href="#如何安裝自己要用的Gem" class="headerlink" title="如何安裝自己要用的Gem?"></a>如何安裝自己要用的Gem?</h1><p>最簡單的放式：只要在Gemfile裡填入你想安裝的gem的名字，<br>然後在終端機專案的目錄底下執行<code>bundle</code> 就可以啦！<br>蛤？你問為什麼不是<code>bundle install</code>，當然是因為懶啊…</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'你要安裝的gem'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle</span><br></pre></td></tr></table></figure><h1 id="版本號的設定"><a href="#版本號的設定" class="headerlink" title="版本號的設定"></a>版本號的設定</h1><p>版本設定大約可以分為下面幾種：</p><ul><li><p>當只有填寫  gem 的名字時，代表我們要安裝的是最新的<strong>穩定</strong>版本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'sqlite3'</span></span><br></pre></td></tr></table></figure></li><li><p>你也可以指定要安裝特定版本，就直接在後面接上版本號。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'puma'</span>, <span class="string">'3.11'</span></span><br></pre></td></tr></table></figure></li><li><p>這樣代表允許安裝含3.0.5版本以上 ~ 不包含3.2版本。</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'listen'</span>, <span class="string">'&gt;= 3.0.5'</span>, <span class="string">'&lt; 3.2'</span></span><br></pre></td></tr></table></figure><ul><li>~&gt; 其實是一種縮寫，代表允許安裝含4.3.1版本以上 ~ 不包含4.4版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;bootstrap&apos;, &apos;~&gt; 4.3.1&apos;</span><br><span class="line">＃其他它是這個意思</span><br><span class="line">gem &apos;bootstrap&apos;, &apos;&gt;= 4.3.1&apos;, &apos;&lt; 4.4&apos;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="什麼是版本號"><a href="#什麼是版本號" class="headerlink" title="什麼是版本號"></a>什麼是版本號</h1><p>順便補充一下版本號：版本號的組成是這樣的：<br> “#{major}.#{minor}.#{build}”</p><blockquote><p>Major: 是主版本號，重大功能變更或是架構有重大更改時會更動，數值才會更動。<br>Minor: 是次(子)版本號，用在小規模的功能增加、調整或變動時。<br>Build: 是階段版本號，通常是修復bug或是一些很小的更動。 </p></blockquote><hr><h1 id="group的意思是？"><a href="#group的意思是？" class="headerlink" title="group的意思是？"></a>group的意思是？</h1><p>Rails 將應用程序的開發環境分為三種：Product（上線/發佈）, Development（開發）, Test（測試）。</p><p>放在 group :development, :test 裡，代表只有 <strong>開發和測試</strong>的時候會使用。<br>放在 group :development 或是 group :test裡，則分別代表只有在<strong>開發或測試</strong>的時候會使用。<br>而其他沒有被 group 包起來的 gem ，則是上線/發佈時才會使用到的gem。</p><p>姆…大概就是這樣啦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day10 其實我不懂Case...When</title>
      <link href="/2019/10/case-when/"/>
      <url>/2019/10/case-when/</url>
      
        <content type="html"><![CDATA[<p>順手翻了一下之前發的文，發現之前在講流程控制的時候，忘記介紹Case…When了，<br>正好就拿來當今天的主題，廢話不多說，直接開始吧！</p><h1 id="case…when"><a href="#case…when" class="headerlink" title="case…when"></a>case…when</h1><p>前面我們介紹過<code>if...elsif</code>的語法，通常這代表你需要判斷的條件比較複雜，<br>比如說像下面的例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blood_type</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">if</span> type == <span class="string">'A'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ａ型"</span></span><br><span class="line">  <span class="keyword">elsif</span> type == <span class="string">'B'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ｂ型"</span></span><br><span class="line">  <span class="keyword">elsif</span> type == <span class="string">'O'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ｏ型"</span></span><br><span class="line">  <span class="keyword">elsif</span> type == <span class="string">'AB'</span></span><br><span class="line">    puts <span class="string">"你的血型是ＡＢ型"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts <span class="string">"血型未確認"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">blood_type(<span class="string">'A'</span>) <span class="comment"># 你的血型是Ａ型</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>通常這時候，你可以改用<code>case...when</code>的方式來改寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blood_type</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">case</span> type</span><br><span class="line">  <span class="keyword">when</span> <span class="string">'A'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ａ型"</span></span><br><span class="line">  <span class="keyword">when</span> <span class="string">'B'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ｂ型"</span></span><br><span class="line">  <span class="keyword">when</span> <span class="string">'O'</span></span><br><span class="line">    puts <span class="string">"你的血型是Ｏ型"</span></span><br><span class="line">  <span class="keyword">when</span> <span class="string">'AB'</span></span><br><span class="line">    puts <span class="string">"你的血型是ＡＢ型"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts <span class="string">"血型未確認"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">blood_type(<span class="string">'A'</span>) <span class="comment"># 你的血型是Ａ型</span></span><br></pre></td></tr></table></figure><p><del>嗯，case…when就介紹到這邊？</del> 當然不是這樣的！</p><hr><h1 id="case…when的運作方式"><a href="#case…when的運作方式" class="headerlink" title="case…when的運作方式"></a>case…when的運作方式</h1><p>上面的<code>case...when</code>  在運作的時候，其實是這樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A'</span> === type</span><br><span class="line"><span class="string">'B'</span> === type</span><br><span class="line"><span class="string">'O'</span> === type</span><br><span class="line"><span class="string">'AB'</span> === type</span><br></pre></td></tr></table></figure><p>看出不同了嗎？<br><code>case...when</code> 用的是<code>===</code>， <code>if...else</code>用的是<code>==</code>，而且我們的條件跑到<code>===</code>的左邊去了，<br>這代表呼叫方法的對象是不同的喔！;</p><blockquote><p>Ruby裡，每樣東西都是物件。</p></blockquote><p>上面這句話，已經重複N遍了，讓我們來還原一部分上面的code來看看吧！</p><p>if…else</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type == <span class="string">'B'</span></span><br><span class="line">type.==(<span class="string">'B'</span>)</span><br></pre></td></tr></table></figure><p>case … when</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'B'</span> === type</span><br><span class="line"><span class="string">'B'</span>.===(type)</span><br></pre></td></tr></table></figure><hr><p>另外，當我們用不同類別的物件去呼叫<code>===</code>時，<code>===</code>分別代表不同的意思：</p><ul><li><p>Range(範圍)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">10</span>) === <span class="number">1</span></span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">when</span> (<span class="number">1</span>..<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候的<code>===</code>相當於 <code>includes?</code></p></li><li><p>Regex()</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/hel/ === <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">when</span> /hel/</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候的<code>===</code>相當於 <code>match</code></p></li><li><p>Classes()</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Array === [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].is_a?Array</span><br></pre></td></tr></table></figure><p>這時候的<code>===</code>相當於 <code>is_a?</code></p></li><li><p>Proc</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; a &#123; a &gt; <span class="number">5</span> &#125; === <span class="number">6</span></span><br></pre></td></tr></table></figure><p>這時候的<code>===</code>相當於 <code>call</code></p></li></ul><hr><p>姆，感覺還是沒有好好的把case…when解釋好…<br>只好附上參考資料，讓各位自己去研讀了 :P<br>鐵人賽，我們明天見！</p><p>參考資料：<br><a href="https://www.rubyguides.com/2015/10/ruby-case/" target="_blank" rel="noopener">The Many Uses Of Ruby Case Statements</a><br><a href="https://sibevin.github.io/posts/2016-06-15-083828-ruby-case-switch" target="_blank" rel="noopener">Ruby的case語法</a><br><a href="https://skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it/" target="_blank" rel="noopener">How A Ruby Case Statement Works</a><br><a href="https://medium.com/rubyinside/triple-equals-black-magic-d934936a6379" target="_blank" rel="noopener">Triple Equals Black Magic</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day09 REST 和 RESTful</title>
      <link href="/2019/10/rest-and-restful/"/>
      <url>/2019/10/rest-and-restful/</url>
      
        <content type="html"><![CDATA[<p>昨天稍微介紹了一下Rails的主角：Routes 和 MVC，</p><p>今天就稍微解釋一下 REST 和 RESTful 吧！</p><hr><h2 id="關於-REST"><a href="#關於-REST" class="headerlink" title="關於 REST"></a>關於 REST</h2><ul><li><p>REST的全文是：REpresentational State Transfer，<br>是由Roy Thomas Fielding博士於2000年所提出的一種軟體架構風格。</p></li><li><p>通常會透過使用HTTP協議（在技術上也可以使用其他協議）來實現。</p></li><li><p>REST本身不是協議，它只是一組慣例，遵循這些慣例可以使<br>不同的Web的應用程序或API之間維持資源(resources)命名的簡單性和一致性。</p></li><li><p>透過資源命名的簡單性和一致性，讓不同軟體/程式在網路（例如網際網路）<br>中互相傳遞資訊能更加便利。</p><a id="more"></a></li></ul><hr><h1 id="關於-RESTful"><a href="#關於-RESTful" class="headerlink" title="關於 RESTful"></a>關於 RESTful</h1><p>符合REST設計架構，並朝這個理念而設計出來的系統，比如說 Ruby on Rails，就可以被稱為是RESTful的系統，表示系統在設計上遵循著 REST 的理念與原則。</p><blockquote><p>在RESTful架構中，標準HTTP方法(Verb)與統一資源標識符（URI）結合使用，<br> 以在客戶端和服務器之間傳遞請求和響應。<br> 每個URI描述一個獨立的操作，並包含滿足請求所需的所有信息(資料)。</p></blockquote><p>還記得昨天的那張圖嗎？沒關係，看下面的表格也可以</p><table><thead><tr><th>Verb</th><th>URI</th><th>Controller#action</th></tr></thead><tbody><tr><td>GET</td><td>/products</td><td>products/index</td></tr><tr><td>POST</td><td>/products</td><td>products/create</td></tr><tr><td>GET</td><td>/products/new</td><td>products/new</td></tr><tr><td>GET</td><td>/products/:id/edit</td><td>products/edit</td></tr><tr><td>GET</td><td>/products/:id</td><td>products/show</td></tr><tr><td>PATCH</td><td>/products/:id</td><td>products/update</td></tr><tr><td>PUT</td><td>/products/:id</td><td>products/update</td></tr><tr><td>DELETE</td><td>/products/:id</td><td>products/destroy</td></tr></tbody></table><p>透過VERB 和 URI 的組合，每個組合要對資料所進行的操作被清楚的區隔開來。</p><hr><p>同場加映：</p><p>補上自己在查資料時，熊熊看不懂的<strong>安全方法</strong>和<strong>冪等方法</strong>，算是幫自己做個紀錄：</p><p>safe &amp; idempotent，這兩個是HTTP狀態描述的專有名詞。</p><ul><li>「safe」是指該操作不會改變原本的資源狀態，並且同樣的結果是可以被快取（Cache）的。例如: 查看訂單是不會改變訂單本身紀錄。</li></ul><ul><li>「idempotent」是指該操作不管做1遍、2遍或多遍，都會得到同樣的資源狀態結果。</li></ul><p>GET 是 安全方法同時也是冪等方法<br>PUT 和 DELETE 是冪等方法</p><hr><p>以上，就是現階段，我對REST和RESTful的了解。<br>鐵人賽，我們明天再見。</p><p>參考資料：<br><a href="https://medium.com/@cindyliu923/%E4%BB%80%E9%BA%BC%E6%98%AF-rest-restful-7667b3054371" target="_blank" rel="noopener">什麼是 REST? RESTful?</a><br><a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">REST - Wiki</a><br><a href="https://blog.toright.com/posts/725/representational-state-transfer-%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B%E9%A2%A8%E6%A0%BC%E4%BB%8B%E7%B4%B9-part-i-%E5%BE%9E%E4%BA%86%E8%A7%A3-rest-%E5%88%B0%E8%A8%AD%E8%A8%88-restful%EF%BC%81.html" target="_blank" rel="noopener">淺談 REST 軟體架構風格</a><br><a href="https://notfalse.net/43/http-request-method" target="_blank" rel="noopener">HTTP 請求方法 (Request Method)</a><br><a href="https://blog.csdn.net/qq_27376871/article/details/78222961" target="_blank" rel="noopener">HTTP方法的安全性和幂等性</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day08 Rails (Routes 和 MVC)</title>
      <link href="/2019/10/rails-routes-mvc/"/>
      <url>/2019/10/rails-routes-mvc/</url>
      
        <content type="html"><![CDATA[<p>花了點時間，總算是把 Ruby 的一些觀念稍微的介紹了一下，<br>接下來換要進入Rails 的部分囉！</p><h1 id="什麼是Rails"><a href="#什麼是Rails" class="headerlink" title="什麼是Rails"></a>什麼是Rails</h1><p>Rails 是一款用Ruby這個程式語言所編寫出來，開源Web的應用框架。</p><p>主要的設計理念是DRY（Don’t Repeat Yourself）和<br>COC（Convention Over Configuration）。</p><hr><h1 id="Routes-和-MVC"><a href="#Routes-和-MVC" class="headerlink" title="Routes 和 MVC"></a>Routes 和 MVC</h1><p>這邊借用一下<a href="https://railsbook.tw/" target="_blank" rel="noopener">為你自己學Ruby on Rails</a>的圖來說明：<br><img src="https://i.imgur.com/s9LYDFU.png" alt=""></p><a id="more"></a><p>可以看出，整個 Rails 的架構由四個部分組成：</p><hr><h2 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h2><p>Rails 裡的Routes 採用的是RESTful的風格，將網址 (URI)視為是一種resources。</p><p>一般我們會在Rails 專案裡的 config/routes.rb寫下類似這樣的東西：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">resources <span class="symbol">:products</span></span><br></pre></td></tr></table></figure><p>然後， rails 就會自動幫你長出下面這些路徑<br><img src="https://i.imgur.com/UwfjdjT.png" alt=""></p><p>其中，Verb 指的是HTTP請求的方法，可分為：</p><ul><li>GET: 讀取資源</li><li>POST: 新增資源</li><li>PATCH/PUT: 更新資源部份內容/替換資源</li><li>DELETE: 刪除資源</li></ul><hr><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>有看到上面那張圖，最右邊有一排Controller#Action。<br>Rails透過URI和不同的Verb(HTTP請求方法)，對應到8個不同的方法(Action)。<br>通常在檔案裡他會比較像是這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># catrs_controller.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Controller 檔名和檔案裡的類別名稱是相關的，像上面的例子：<br>檔名是： carts_controller<br>類別名稱是：CartsController</p><hr><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>在Rails裡，是透過Model來對資料庫進行操作的，讓你可以簡單的功能上，可以不用寫SQL語法，就可以從資料庫取得資料。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; ApplicationRecord</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Model的名稱和資料表，這也遵循著Rails的慣例：</p><table><thead><tr><th>Model類別</th><th>檔案名稱</th><th>資料表</th></tr></thead><tbody><tr><td>Cat</td><td>cat.rb</td><td>cats</td></tr><tr><td>Post</td><td>post.rb</td><td>posts</td></tr></tbody></table><hr><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>在Rails裡View的存放位置也有個慣例：<br>舉例來說：跟 CatsController 相關的 View，就會放在 app/views/cats 裡。如果執行的是 CatsController 的 index Action，預設會去找 app/views/cats/index.html.erb 這個檔案。</p><p>檔案名最後面的 erb 是 Embedded Ruby 的縮寫；<br>意思是，你可在在裡面寫 Ruby的語法，<br>然後會再透過Ruby預設的ERB library，幫你編譯成HTML語法。</p><hr><h1 id="Routes-MVC"><a href="#Routes-MVC" class="headerlink" title="Routes + MVC"></a>Routes + MVC</h1><p>再看一次上面那張圖：<br><img src="https://i.imgur.com/s9LYDFU.png" alt=""></p><p>我們可以將他解釋成：</p><ol><li>瀏覽器依據資源(resources)的設定，經由Route去找到Controller中，對應的action(method)。</li><li>視需要透過Model向資料庫取得資料後，處理完再與對應的View(.html.erb)做結合。</li><li>View處理完後再回傳給Controller，Controller再將結果轉交給瀏覽器。</li></ol><hr><p>這就是，Routes 和 MVC的基本概念，有錯還請不吝指教。</p><p>鐵人賽，我們明天見！</p><p>參考資料：<br><a href="https://railsbook.tw/" target="_blank" rel="noopener">為你自己學Ruby on Rails</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day07  Ruby   中的 self 到底是？</title>
      <link href="/2019/10/self-in-ruby/"/>
      <url>/2019/10/self-in-ruby/</url>
      
        <content type="html"><![CDATA[<p>第一次看到在Ruby 中看到 <code>self</code> 是在介紹<br>instance method 和 class method 的時候：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>  </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span> <span class="comment">#instance method</span></span></span><br><span class="line">    puts <span class="string">"I'm instance method"</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">all</span> <span class="comment">#class method ，記得加上self</span></span></span><br><span class="line">    puts <span class="string">"I'm class method"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty =  Cat.new<span class="comment">#使用kitty 產生實體</span></span><br><span class="line">kitty.say       <span class="comment"># I'm instance method</span></span><br><span class="line">Cat.all         <span class="comment"># I'm class method</span></span><br></pre></td></tr></table></figure><hr><p>從這時候開始，<code>self</code> 就一直在我的腦海中揮之不去，每天每天都在想著：</p><h1 id="親愛的-self，-哩道底洗蝦米碗糕？！"><a href="#親愛的-self，-哩道底洗蝦米碗糕？！" class="headerlink" title="親愛的 self， 哩道底洗蝦米碗糕？！"></a>親愛的 self， 哩道底洗蝦米碗糕？！</h1><a id="more"></a> <p>身為一名立志成為工程師的自宅警備員，<br>遇到問題，找谷哥就對了！<br>跟著關鍵字(ruby api self)所找到回答是：</p><blockquote><p>self<br>self is the “current object” and the default receiver of messages (method calls)<br>for which no explicit receiver is specified.<br>Which object plays the role of self depends on the context.</p></blockquote><p>英文字太多？沒關係，挑重點看就好：</p><ul><li>the “current object”</li><li>the default receiver of messages (method calls)</li></ul><hr><h2 id="關於current-object"><a href="#關於current-object" class="headerlink" title="關於current object"></a>關於current object</h2><p>從下面的的程式碼可以看到，當我們試著在不同的地方去印出<code>self</code>(呼叫self) 時，<br><code>self</code> 會根據他本身所在的位置而有不同的結果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p <span class="string">"<span class="subst">#&#123;<span class="keyword">self</span>&#125;</span> outside the class Cat"</span> </span><br><span class="line"><span class="comment"># "main outside the class Cat"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">  p <span class="string">"<span class="subst">#&#123;<span class="keyword">self</span>&#125;</span> inside the class Cat"</span> </span><br><span class="line">  <span class="comment"># "Cat inside the class Cat"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">eat</span></span></span><br><span class="line">    p <span class="string">"<span class="subst">#&#123;<span class="keyword">self</span>&#125;</span> inside the self.eat method"</span> </span><br><span class="line">    <span class="comment"># "Cat inside the self.eat method"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Cat.eat</span><br></pre></td></tr></table></figure><p>再回頭看看原本定義的內容，應該對<code>self</code>稍微有一點感覺了吧？</p><blockquote><p>Which object plays the role of self depends on the context.<br>(翻譯蒟蒻：self 在上下文之間的位置，會決定 self 所代表的物件)</p></blockquote><hr><h2 id="關於-default-receiver"><a href="#關於-default-receiver" class="headerlink" title="關於 default receiver"></a>關於 default receiver</h2><blockquote><p>the default receiver of messages (method calls)<br>for which no explicit receiver is specified<br>self automatically receives message that don’t have an explicit receiver:</p></blockquote><ul><li>receiver ，就是呼叫方法的物件本身。</li><li>message ，被物件呼叫的方法。</li></ul><p>稍微看一下簡單的範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[*<span class="number">1</span>..<span class="number">10</span>].select&#123;<span class="params">|i|</span> i.odd?&#125;</span><br></pre></td></tr></table></figure><p><code>[*1..10]</code> 和 <code>i</code>，就是 receiver。<br><code>select</code> 和 <code>odd?</code> 就是個別被呼叫的 message</p><p>在看個很常見的整數的加法：</p><p>＃你以為的整數加法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>＃他在ruby裡真正的樣子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.+(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Welcome to the world of object orientation</p></blockquote><hr><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>回頭再來看看API文件中的範例程式碼：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">upcase_and_reverse</span></span></span><br><span class="line">    upcase.reverse</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"abcd"</span>.upcase_and_reverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#會印出  DCBA</span></span><br></pre></td></tr></table></figure><blockquote><p>In this method definition, the message upcase goes to self,<br> which is whatever string calls the method.</p></blockquote><p>其中的 <code>“abcd”.upcase_and_reverse</code>，就可以解釋成：<br><code>“abcd”</code>這個字串(current object)，本身是個 receiver (default receiver)，<br>呼叫(傳送)了<code>upcase</code> 和 <code>reverse</code> 這兩個method(message)。</p><hr><p>以上，就是目前我對<code>self</code>的認識，有錯還請指正。<br>鐵人賽，我們明天再見！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day06  Class(類別) 和 Ｍodule(模組) 的不同</title>
      <link href="/2019/10/class-and-module/"/>
      <url>/2019/10/class-and-module/</url>
      
        <content type="html"><![CDATA[<h1 id="什麼是Class-類別"><a href="#什麼是Class-類別" class="headerlink" title="什麼是Class(類別)"></a>什麼是Class(類別)</h1><p>其實，Class 是很生活化的：</p><p>當你和朋友走近一家拉麵店，菜單上面有：<br>麵條粗細，湯頭濃淡，口味有醬油或是豚骨，蔥花海苔要不要增量…之類的。<br>點完過了一陣子之後，正妹服務生就會將一碗一碗的拉麵端出來。</p><p><del>是正妹服務生？(快存檔！！)</del></p><p>什麼？你說正妹服務生就是Class? 真是孺子可教也(毆飛)</p><a id="more"></a> <p>姆丟啦！<br>在廚房裡煮拉麵的師傅才是類別(Class)，<br>你菜單上寫的選項就是參數(params)，<br>正妹服務生端出來的拉麵就是實體(instance)</p><p>現在你應該看得懂下面這段話：</p><blockquote><p>A class can be so much more – it can hold its state (by keeping track of instance variables) and be duplicated as many times as you want. </p></blockquote><hr><h1 id="什麼是Module-模組"><a href="#什麼是Module-模組" class="headerlink" title="什麼是Ｍodule(模組)"></a>什麼是Ｍodule(模組)</h1><p>當你拿到一隻新的智慧型手機(Class)的時候，通常我們都會想再安裝其他Apps(Module)，對吧？</p><p>為什麼你會想安裝Apps呢？<br>當然是因為原生的手機沒有這個功能，或是你下載的Apps有更強大的功能。<br>這就是Module的概念：用來幫Class擴充方法的工具包，說白一點就是外掛。</p><p>現在你應該看得懂下面這段話：</p><blockquote><p>A module will never be anything other than a library of methods.</p></blockquote><hr><h1 id="Class-和-Module-有什麼差別？"><a href="#Class-和-Module-有什麼差別？" class="headerlink" title="Class 和 Module 有什麼差別？"></a>Class 和 Module 有什麼差別？</h1><p>一句話：</p><blockquote><p>Class(類別)可以繼承也可以被繼承，但是Module(模組)不行</p></blockquote><ul><li>Class 主要是用來產生物件(Object)</li><li>Module 主要是是提供方法(工具包)和namespace</li></ul><h1 id="namespace-是什麼？能吃嗎？"><a href="#namespace-是什麼？能吃嗎？" class="headerlink" title="namespace 是什麼？能吃嗎？"></a>namespace 是什麼？能吃嗎？</h1><p>當我們很不幸有同名的類別，又希望他們能執行不同的任務時，<br>這時候，就可以用module來產生namespace:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#namespace 的用法：各地金城武前來報到</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">      puts <span class="string">"I come from module A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">      puts <span class="string">"I come from module B"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">patty = A::Cat.new  <span class="comment"># 使用A模組裡面的Cat類別</span></span><br><span class="line"></span><br><span class="line">happy = B::Cat.new  <span class="comment"># 使用B模組裡面的Cat類別</span></span><br></pre></td></tr></table></figure><hr><h1 id="Class-要怎麼取得-Module-裡的方法？"><a href="#Class-要怎麼取得-Module-裡的方法？" class="headerlink" title="Class 要怎麼取得 Module 裡的方法？"></a>Class 要怎麼取得 Module 裡的方法？</h1><p>有兩種做法：</p><ul><li>include（引入）:會產生 實體方法:作用在實體(instance)身上</li><li>extend（擴充）: 會產生 類別方法:作用在類別(class)身上</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fly</span></span></span><br><span class="line">    puts <span class="string">"ButterFly!"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">  <span class="keyword">include</span> Flyable</span><br><span class="line">  <span class="comment">#引入  fly是實體方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">  extend Flyable</span><br><span class="line">  <span class="comment">#擴充  fly是類別方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.fly <span class="comment">#實體方法</span></span><br><span class="line"></span><br><span class="line">Dog.fly   <span class="comment">#類別方法</span></span><br></pre></td></tr></table></figure><p>一直下雨好想出去玩啊！！！<br>鐵人賽我們明天再見囉！</p><p>參考資料：<br><a href="https://railsbook.tw/chapters/08-ruby-basic-4.html" target="_blank" rel="noopener">為你自己學 Ruby on Rails</a><br><a href="https://www.vikingcodeschool.com/professional-development-with-ruby/classes-vs-modules" target="_blank" rel="noopener">classes-vs-modules</a><br><a href="https://simpleit.rocks/ruby/language/what-is-the-difference-between-modules-and-classes-in-ruby/" target="_blank" rel="noopener">Difference Between Modules And Classes</a><br><a href="https://matt.aimonetti.net/posts/2012-07-ruby-class-module-mixins/" target="_blank" rel="noopener">class-module-mixins</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day05   稍微介紹一下：Method 和 Block</title>
      <link href="/2019/10/method-and-block/"/>
      <url>/2019/10/method-and-block/</url>
      
        <content type="html"><![CDATA[<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p>前面一直提到方法，那麼到底在Ruby裡，方法(Method)是怎麼被定義的呢？</p><p>下面是，在Ruby裡，我們定義方法和呼叫方法的樣子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 方法名稱<span class="params">(參數個數隨意)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>呼叫方法的時候，() 是可以省略的：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello_to</span><span class="params">(someone)</span></span></span><br><span class="line">  puts <span class="string">"Hi, <span class="subst">#&#123;someone&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> say_hello_to(<span class="string">"DinDin"</span>) <span class="comment"># "Hi, DinDin"</span></span><br><span class="line"> say_hello_to <span class="string">"LaLa"</span>    <span class="comment"># "Hi, LaLa"</span></span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><hr><h2 id="Method的一些觀念："><a href="#Method的一些觀念：" class="headerlink" title="Method的一些觀念："></a>Method的一些觀念：</h2><ul><li>在定義方法的時後，可以先給他預設值：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi_to</span><span class="params">(some = <span class="string">"Vegeta"</span>)</span></span></span><br><span class="line">  puts <span class="string">" I'm <span class="subst">#&#123;some&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hi_to()       <span class="comment"># "I'm Vegeta"</span></span><br><span class="line">say_hi_to(<span class="string">"Goku"</span>) <span class="comment"># "I'm Goku"</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>?和！也可以是方法的一部份</li></ul><p>方法名稱後面如果接上? ，通常我們預期他會回傳true or false;<br>當然你也可以惡搞：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_fly?</span><span class="params">(age = <span class="number">10</span>)</span></span></span><br><span class="line">    <span class="keyword">if</span> (age &lt;= <span class="number">10</span>)</span><br><span class="line">      <span class="comment">#true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"I can fly, cause I'm <span class="subst">#&#123;age&#125;</span>."</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">#false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Oops,you're <span class="subst">#&#123;age&#125;</span>, that's why you can't fly."</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p can_fly?</span><br><span class="line">=&gt; <span class="string">"I can fly, cause I'm 10."</span> </span><br><span class="line">p can_fly?(<span class="number">20</span>)</span><br><span class="line">=&gt; <span class="string">"Oops,you're 20, that's why you can't fly."</span></span><br></pre></td></tr></table></figure><hr><ul><li>Method後面接 ! ，表示會帶來副作用</li></ul><p>這邊我們用陣列的sort 和sort! 方法來做示範：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">p list.sort        <span class="comment"># [1, 2, 3, 5]</span></span><br><span class="line">p list             <span class="comment"># [3, 2, 1, 5]  </span></span><br><span class="line">p list.sort!       <span class="comment"># [1, 2, 3, 5]</span></span><br><span class="line">p list             <span class="comment"># [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><p>有看到嗎？ 當你對list使用了 sort! 方法， list就回不去了…<br><del>就像變了心的女友一樣(淚目</del>)~~</p><hr><h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h1><blockquote><p>Block 不是物件<br>Block 不是參數</p></blockquote><p>Ruby裡大部分的東西都是物件， 而Block就是少數的例外。<br>其實在前面的部分Block 就已經出現過了:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line"> b &lt;&lt; i <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> a.select &#123;<span class="params">|i|</span> i % <span class="number">2</span> == <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>上面在 each “方法後面” 的 do…end 和<br>select “方法後面” 的 { }，就是所謂的Block。</p><p>會強調”方法後面”是因為：</p><blockquote><p>Block 是不能單獨存在的。<br>Block 只是附加在方法後面，等著被呼叫的一段程式碼。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; puts <span class="string">"這樣會出錯!!"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   puts <span class="string">"安捏馬港款"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="Block的一些觀念："><a href="#Block的一些觀念：" class="headerlink" title="Block的一些觀念："></a>Block的一些觀念：</h2><p>關於block的觀念，個人覺得看code最有感，所以…<br>廢話不多說 ，來看code吧！ ：）</p><ul><li>Block 需要透過 yield 來呼叫<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span></span></span><br><span class="line">  puts <span class="string">%Q(say hello "method")</span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  puts <span class="string">%Q(back to say hello "method")</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello &#123;</span><br><span class="line">  puts <span class="string">%Q(say hello "block" with yield)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># say hello "method"</span></span><br><span class="line"><span class="comment"># say hello "block" with yield</span></span><br><span class="line"><span class="comment"># back to say hello "method"</span></span><br></pre></td></tr></table></figure></li></ul><p>如果沒有yield，寫在Block裡面的東西，是不會有反應的:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">meow</span></span></span><br><span class="line">  puts <span class="string">"霹靂！霹靂！霹靂貓！！"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">meow &#123;</span><br><span class="line">  puts <span class="string">"You can't see me"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#"霹靂！霹靂！霹靂貓！！"</span></span><br></pre></td></tr></table></figure><hr><ul><li>yield 是可以傳遞參數的<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">way_hi4_din</span></span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"什麼"</span>,<span class="string">"什麼"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">way_hi4_din &#123; <span class="params">|n, m|</span></span><br><span class="line">  puts <span class="string">%Q(婆婆，我要<span class="subst">#&#123;n&#125;</span>你打<span class="subst">#&#123;n&#125;</span>，這才是餵～)</span></span><br><span class="line">  puts <span class="string">%Q(不對，妳要<span class="subst">#&#123;m&#125;</span>我打<span class="subst">#&#123;m&#125;</span>，這叫做盯～)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 婆婆，我要什麼你打什麼，這才是餵～</span></span><br><span class="line"><span class="comment"># 不對，妳要什麼我打什麼，這叫做盯～</span></span><br></pre></td></tr></table></figure>這麼生活化的例子，應該不需要我多做解釋了吧？</li></ul><hr><ul><li>block 會自動回傳最後的結果<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_pregnancy</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">yield</span> (<span class="string">"||"</span>)</span><br><span class="line">    puts <span class="string">%Q(恭喜老爺！賀喜夫人！)</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts <span class="string">%Q(換個姿勢，再來一次！)</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test_pregnancy &#123;<span class="params">|result|</span></span><br><span class="line">  result == <span class="string">"||"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恭喜老爺！賀喜夫人！</span></span><br></pre></td></tr></table></figure>下面這段程式碼是用來展示，參數傳遞的過程：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">im_from</span><span class="params">(place)</span></span></span><br><span class="line">  puts <span class="string">"params passed from method im_from"</span></span><br><span class="line">  <span class="keyword">yield</span> place</span><br><span class="line">  puts <span class="string">"leaving im_from"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">im_from(<span class="string">"Namek"</span>) &#123; <span class="params">|place|</span></span><br><span class="line">  puts <span class="string">"params pass in to block "</span></span><br><span class="line">  puts <span class="string">%Q(I'm from <span class="subst">#&#123;place&#125;</span>.)</span></span><br><span class="line">  puts <span class="string">"prepare go back to method "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># params passed from method im_from</span></span><br><span class="line"><span class="comment"># params pass in to block</span></span><br><span class="line"><span class="comment"># I'm from Namek.</span></span><br><span class="line"><span class="comment"># prepare go back to method</span></span><br><span class="line"><span class="comment"># leaving im_from</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Proc"><a href="#Proc" class="headerlink" title="Proc"></a>Proc</h2><p>但是其實，在Ruby裡面，還是有方法可以將Block物件化的；<br>那就是Proc，用起來的手感大概是像這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shoot = Proc.new &#123;<span class="params">|name|</span> p <span class="string">"<span class="subst">#&#123;name&#125;</span>  Shooooot!!!"</span>&#125;</span><br><span class="line"></span><br><span class="line">shoot[<span class="string">"Neo Armstrong Cyclone Jet Armstrong Cannon"</span>]</span><br><span class="line">shoot.(<span class="string">"Neo Armstrong Cyclone Jet Armstrong Cannon"</span>)</span><br><span class="line">shoot.===(<span class="string">"Neo Armstrong Cyclone Jet Armstrong Cannon"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面三種呼叫方式，都會得到下面的結果</span></span><br><span class="line"><span class="string">"Neo Armstrong Cyclone Jet Armstrong Cannon  Shooooot!!!"</span></span><br></pre></td></tr></table></figure><p>嗯？又有奇怪的東西混進程式碼了嗎？<br>大概是我太累產生的錯覺吧…</p><p> 鐵人賽，我們明天再會！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day04  Symbol (符號)和 String(字串) 的差別</title>
      <link href="/2019/10/symbol-and-string/"/>
      <url>/2019/10/symbol-and-string/</url>
      
        <content type="html"><![CDATA[<p>要了解Symbol (符號)和 String(字串)  的差別，<br>首先，我們得先複習一下Variable(變數) 和 String(字串)：</p><h2 id="Variable-變數"><a href="#Variable-變數" class="headerlink" title="Variable(變數)"></a>Variable(變數)</h2><blockquote><p>變數，它本身並沒有形態。你可以把它想像成是「一張有寫著名字的標籤，貼在某個東西上面」，被貼的那個東西有形態，但標籤本身沒有。<br> - from <a href="https://railsbook.tw/chapters/05-ruby-basic-1.html" target="_blank" rel="noopener">為你自己學 Ruby and Rails</a></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"I am string"</span> </span><br><span class="line"><span class="comment"># str 是一個變數，是個標籤，它被貼在"I am string"這個字串上面。</span></span><br><span class="line">str.<span class="keyword">class</span> =&gt; String</span><br><span class="line">str.object_id =&gt; <span class="number">70345293831900</span></span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="String-字串"><a href="#String-字串" class="headerlink" title="String(字串)"></a>String(字串)</h2><blockquote><p>String 是一個字串物件，同時也是一串由字母(characters)<br> 所組成的陣列(Array)，所以許多陣列上的方法也都適用。</p></blockquote> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字串的內容可以任意修改。</span></span><br><span class="line"> str[<span class="number">3</span>] =&gt; <span class="string">"m"</span></span><br><span class="line"> str.reverse =&gt; <span class="string">"gnirts ma I"</span></span><br><span class="line"> str[<span class="number">0</span>] = <span class="string">"A"</span></span><br><span class="line"> p str =&gt; <span class="string">"A am string"</span></span><br></pre></td></tr></table></figure><hr><h2 id="Symbol-符號"><a href="#Symbol-符號" class="headerlink" title="Symbol(符號)"></a>Symbol(符號)</h2><blockquote><p>A Symbol is the most basic Ruby object you can create. It’s just a name and an internal ID. - rubylearing.com<br>Symbol objects represent names and some strings inside the Ruby interpreter.  from ruby-doc.org</p></blockquote><p>Symbol(符號)：</p><ul><li>Symbol 是一個有名字的物件。</li><li>Symbol 是一個值，不是變數。</li><li>Symbol 具有唯一性(ID)的特徵，所以不能修改。</li></ul><p>讓我們來看看下面的範例：</p><ol><li><p>:name 是一個物件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:name</span>.<span class="keyword">class</span> =&gt; Symbol</span><br><span class="line"><span class="symbol">:name</span>.object_id =&gt; <span class="number">87708</span></span><br></pre></td></tr></table></figure></li><li><p>:name 是一個值，有他自己的名字，:name。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">=&gt; <span class="number">2</span></span><br><span class="line">x = <span class="symbol">:name</span></span><br><span class="line">=&gt; <span class="symbol">:name</span></span><br></pre></td></tr></table></figure></li><li><p>:name 不是變數，無法被賦予值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:name</span> = <span class="string">"string"</span></span><br><span class="line">=&gt; syntax error, unexpected <span class="string">'='</span> ...</span><br></pre></td></tr></table></figure></li><li><p>#:name，具有唯一性。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每次在印出"name"字串時，所得到的object_id 都不同</span></span><br><span class="line">p <span class="string">"name"</span>.object_id =&gt; <span class="number">70143757662660</span></span><br><span class="line">p <span class="string">"name"</span>.object_id =&gt; <span class="number">70143757662560</span></span><br><span class="line">p <span class="string">"name"</span>.object_id =&gt; <span class="number">70143757662460</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在印出:name的時候，只有一個object_id(唯一性)。</span></span><br><span class="line">p <span class="symbol">:name</span>.object_id =&gt; <span class="number">1057308</span></span><br><span class="line">p <span class="symbol">:name</span>.object_id =&gt; <span class="number">1057308</span></span><br><span class="line">p <span class="symbol">:name</span>.object_id =&gt; <span class="number">1057308</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li>無法對:name進行修改。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:name</span>[<span class="number">0</span>] =&gt; <span class="string">"n"</span></span><br><span class="line"><span class="symbol">:name</span>.reverse =&gt; NoMethodError</span><br><span class="line"><span class="symbol">:name</span>[<span class="number">0</span>] = A =&gt; NameError (uninitialized constant A)</span><br><span class="line"><span class="symbol">:name</span>[<span class="number">0</span>] = a =&gt; NameError (undefined local variable <span class="keyword">or</span> method <span class="string">`a' for main:Object)</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Symbol和String-之間的互相轉換"><a href="#Symbol和String-之間的互相轉換" class="headerlink" title="Symbol和String 之間的互相轉換"></a>Symbol和String 之間的互相轉換</h2><p> <a href="https://repl.it/@Chris_Chiu/Symbol" target="_blank" rel="noopener">Transform between Symbol and String </a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="symbol">:name</span></span><br><span class="line">p name</span><br><span class="line">str = name.to_s</span><br><span class="line">p str</span><br><span class="line">s2sym_1 = str.to_sym</span><br><span class="line">s2sym_2 = str.intern</span><br><span class="line">p s2sym_1 <span class="comment"># convert from .to_sym</span></span><br><span class="line">p s2sym_2 <span class="comment"># convert from .intern</span></span><br></pre></td></tr></table></figure><h2 id="有其他方式會產生Symbol嗎？"><a href="#有其他方式會產生Symbol嗎？" class="headerlink" title="有其他方式會產生Symbol嗎？"></a>有其他方式會產生Symbol嗎？</h2><blockquote><p>Symbols are names - names of instance variables, names of methods, names of classes. - rubylearing.com<br>Thus if Fred is a constant in one context, a method in another, and a class in a third, the Symbol :Fred will be the same object in all three contexts.<br> - ruby-doc.org</p></blockquote><p>你可以用Google翻譯一下上面文字，或是直接看翻譯蒟蒻：<br>有四種方式會產生Symbol:</p><ul><li>實體變數(instant variable)</li><li>定義方法(method)</li><li>建立類別(Class); Class name 本身就是常數。</li><li>常數(contant)</li></ul><p><a href="https://repl.it/@Chris_Chiu/Symbol" target="_blank" rel="noopener">建立Symbol</a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">  @weight</span><br><span class="line">  Hi = <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">meow</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts <span class="symbol">:Cat</span>.object_id.to_s + <span class="string">" is from class Cat"</span></span><br><span class="line">puts <span class="symbol">:weight</span>.object_id.to_s + <span class="string">" is from instance variable weight"</span></span><br><span class="line">puts <span class="symbol">:Hi</span>.object_id.to_s + <span class="string">" is from constant Hi"</span></span><br><span class="line">puts <span class="symbol">:meow</span>.object_id.to_s + <span class="string">" is from method meow"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Repl.it上的執行結果</span></span><br><span class="line"><span class="number">1047588</span> is from <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line"><span class="number">1048668</span> is from instance variable weight</span><br><span class="line"><span class="number">1048228</span> is from constant Hi</span><br><span class="line"><span class="number">1048348</span> is from method meow</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://repl.it/@Chris_Chiu/Symbol" target="_blank" rel="noopener">如果實體變數、方法、類別、常數命名都相同的時候會…？</a></p></blockquote><hr><blockquote><p>什麼時候該用Symbol，什麼時候該用String？<br>If you use the contents of a string, this content may change, using a string.<br>If you use a fixed name or an identifier, use the symbol. - IBM opensource</p></blockquote><p>簡單來說：<br>當你存放的內容是會變動時，使用String。<br>當你存放固定資料或是希望資料具有唯一性時，使用Symbol。</p><hr><blockquote><p>Symbol是用在什麼地方呢？</p></blockquote><p>#這是在存取資料時常用的Hash</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123;<span class="symbol">name:</span> <span class="string">'kk'</span>, <span class="symbol">age:</span> <span class="number">18</span>, <span class="symbol">email:</span> <span class="string">'kk@5xruby.tw'</span>&#125; </span><br><span class="line"><span class="comment"># 改成舊式的寫法：</span></span><br><span class="line">profile = &#123;<span class="symbol">:name</span> =&gt; <span class="string">'kk'</span>, <span class="symbol">:age</span> =&gt; <span class="number">18</span>, <span class="symbol">:email</span> =&gt; <span class="string">'kk@5xruby.tw'</span>&#125;</span><br></pre></td></tr></table></figure><p>#這是在Rails中常見的Migration檔的內容:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateTodos</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:todos</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.string <span class="symbol">:description</span></span><br><span class="line">      t.references <span class="symbol">:user</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>#這是在Rails中常見的Model中的檔案內容:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">validates <span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>冷知識：Symbol 命名的注意事項<br>Symbol 在命名時，不接受”\“字元：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#irb Mode</span></span><br><span class="line">:name =&gt; :name</span><br><span class="line">:n\ame =&gt; SyntaxError</span><br></pre></td></tr></table></figure><hr><p>以上，就是Symbol (符號)和 String(字串) 的差別。<br>鐵人賽，我們下次再見！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day03   Array and Hash</title>
      <link href="/2019/10/array-and-hash/"/>
      <url>/2019/10/array-and-hash/</url>
      
        <content type="html"><![CDATA[<p>好啦，昨天介紹完變數和常數，今天就從 Array 和 Hash 繼續下去吧！！</p><p>什麼？你說我還沒講資料型別？<del>阿是不會自己去google 喔？</del></p><p>別急別急，讓我們慢慢看下去…</p><hr><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>首先讓我們來看看下面這些陣列(Array)：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'What'</span>, <span class="string">'I said is'</span>, <span class="string">'is rubbish'</span>, <span class="string">'everyone here'</span>]</span><br><span class="line"></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">c = [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">d = [<span class="string">'懦夫救星'</span>, <span class="number">28825252</span>, <span class="literal">true</span> ]</span><br></pre></td></tr></table></figure><a id="more"></a> <p><del>嗯？好像有奇怪的東西混進程式碼裡面…暫時先不管他啦！</del></p><p>上面的 a, b, c, d 都是陣列，在Ruby 的世界，陣列裡面要放什麼，隨你高興。<br>你要都放字串，數字，或是boolean值，或是混在一起<del>做成撒尿牛丸？</del>，歡喜就好。</p><blockquote><p>在Ruby 的世界裡，幾乎所有的東西都是物件，依照物件類別的不同，<br>會有不同的方法可以使用。</p></blockquote><p>比如說：</p><ul><li>length, 可以幫我們取得陣列的長度（陣列元素的個數）<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'What'</span>, <span class="string">'I said is'</span>, <span class="string">'is rubbish'</span>, <span class="string">'everyone here'</span>]</span><br><span class="line"></span><br><span class="line">a.length</span><br><span class="line">=&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure></li><li>array[index], 可以讓我們直接取得陣列中的元素(index 是從0 開始計算的)<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>]</span><br><span class="line">=&gt; <span class="string">"What"</span></span><br><span class="line">a[<span class="number">3</span>]</span><br><span class="line">=&gt; <span class="string">"everyone here"</span></span><br><span class="line">a[-<span class="number">1</span>]</span><br><span class="line">=&gt; <span class="string">"everyone here"</span></span><br><span class="line">a[-<span class="number">4</span>]</span><br><span class="line">=&gt; <span class="string">"What"</span></span><br><span class="line">a[-<span class="number">5</span>]</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure>相信眼尖的你應該有發現，沒錯：<blockquote><p>在Ruby 的世界裡index 可以是負數，會自動幫你從最後一個元素倒著數。</p></blockquote></li><li>reverse, 可以反轉陣列內元素的順序</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.reverse</span><br><span class="line">=&gt;[<span class="string">"everyone here"</span>, <span class="string">"is rubbish"</span>, <span class="string">"I said is"</span>, <span class="string">"What"</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="更多Array可以使用的方法"><a href="#更多Array可以使用的方法" class="headerlink" title="更多Array可以使用的方法"></a>更多Array可以使用的方法</h2><p>還記得昨天提到的 each 嗎？ 他其實是Array可以使用的方法之一；<br>下面我們就來進一步介紹幾個比較常用的方法：</p><ul><li>select</li><li>map</li><li>reduce</li></ul><h3 id="Select-選出陣列中滿足特定條件的元素，回傳一個新的陣列"><a href="#Select-選出陣列中滿足特定條件的元素，回傳一個新的陣列" class="headerlink" title="Select - 選出陣列中滿足特定條件的元素，回傳一個新的陣列"></a>Select - 選出陣列中滿足特定條件的元素，回傳一個新的陣列</h3><p>首先，來試著選出 陣列a 中所有的奇數。<br>就用昨天剛學會的 each 來試試看吧！<br>寫起來大概會像這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line"></span><br><span class="line">a.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line"> b &lt;&lt; i <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p b  <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><p>如果改用select來寫呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">p a.select &#123;<span class="params">|i|</span> i % <span class="number">2</span> == <span class="number">1</span>&#125; <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><p>WTF?!!! 不不不，這是Ruby的日常喔！<br>稍微觀察一下，可以看出select的用法是這樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.select&#123;<span class="params">|i|</span> <span class="string">"篩選的條件"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="map-對陣列中的元素做處理，然後回傳一個新的陣列"><a href="#map-對陣列中的元素做處理，然後回傳一個新的陣列" class="headerlink" title="map - 對陣列中的元素做處理，然後回傳一個新的陣列"></a>map - 對陣列中的元素做處理，然後回傳一個新的陣列</h3><p>接著我們試著將 陣列[1, 2, 3, 4, 5] 變成 [2, 4, 6, 8, 10]。<br>一樣，先用 each 來做，寫起來會像是這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">d = []</span><br><span class="line">c.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  d &lt;&lt;  i * <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p d <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>那如果改用map寫呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">p c.map&#123;<span class="params">|i|</span> i * <span class="number">2</span>&#125; <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>WTF? 沒有剛剛那麼驚訝了吧？<br>聰明如你應該已經發現了:</p><blockquote><p>如果你需要再迴圈外面定義一個變數，然後在迴圈裡面重複的取用他；<br>那在Ruby通常會有更簡單的寫法。</p></blockquote><h3 id="reduce-對陣列中所有的元素，依據設定的條件，進行二元運算"><a href="#reduce-對陣列中所有的元素，依據設定的條件，進行二元運算" class="headerlink" title="reduce -  對陣列中所有的元素，依據設定的條件，進行二元運算"></a>reduce -  對陣列中所有的元素，依據設定的條件，進行二元運算</h3><p>接著，我試著來計算1到10的總和吧！<br>老樣子，我們先用each來做：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> total = <span class="number">0</span></span><br><span class="line">[*<span class="number">1</span>..<span class="number">10</span>].each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  sum = sum + i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p sum <span class="comment"># 55</span></span><br></pre></td></tr></table></figure><p>看出端倪了嗎？換成reduce的話，可以寫成這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].reduce(<span class="number">0</span>) &#123;<span class="params">|total,i|</span> total + i&#125; <span class="comment"># 55</span></span><br></pre></td></tr></table></figure><p>有看到奇怪的東西嗎？ </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[*<span class="number">1</span>..<span class="number">10</span> ] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><blockquote><p>*是建立Array的一種縮寫</p></blockquote><p>此外還有一個需要注意的地方：</p><blockquote><p>reduce(0) ，括號裡面的 0 ，是我們給total設定的初始值，它的作用和用each的寫法時，<br> 在外面寫的 total = 0 一樣。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].reduce &#123;<span class="params">|total,i|</span> total + i&#125; <span class="comment"># 55</span></span><br></pre></td></tr></table></figure><blockquote><p>當你沒有設定初始值， reduce方法，會自己拿第一個元素作為初始值，在這個例子裡就是 1 。</p></blockquote><p>可以透過下面的程式碼觀察兩者的差異：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*<span class="number">1</span>..<span class="number">10</span>].reduce(<span class="number">0</span>)&#123;<span class="params">|total,i|</span> p (total + i) &#125; <span class="comment"># 1, 3, ... 45, 55</span></span><br><span class="line">[*<span class="number">1</span>..<span class="number">10</span>].reduce&#123;<span class="params">|total,i|</span> p (total + i) &#125; <span class="comment"># 3, ... 45, 55</span></span><br></pre></td></tr></table></figure><hr><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p><del>公堂之上假設一下，我想是無傷大雅的</del><br>假設我們有一籃水果，裡面有蘋果5個，香蕉3個，芒果4個。<br>下面三種寫法的意思都是一樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basket = &#123; <span class="string">"apple"</span> =&gt; <span class="number">5</span>, <span class="string">"banana"</span> =&gt; <span class="number">3</span>, <span class="string">"mango"</span> =&gt; <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basket = &#123; <span class="symbol">:apple</span> =&gt; <span class="number">5</span>, <span class="symbol">:banana</span> =&gt; <span class="number">3</span>, <span class="symbol">:mango</span> =&gt; <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basket = &#123; <span class="symbol">apple:</span> <span class="number">5</span>, <span class="symbol">banana:</span> <span class="number">3</span>, <span class="symbol">mango:</span> <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><p>在 basket 這個 hash 當中：<br>“apple”、”banana” 和 “mango”，我們稱之為key<br>5、3和4，我們稱之為value</p><p>但是，當你想知道蘋果有幾個的時候：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basket[<span class="symbol">:apple</span>] <span class="comment">#只有這樣才拿得到值</span></span><br><span class="line">=&gt; <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>這裡的 :apple 他是一個符號(symbol)</p></blockquote><p>each 也是 Hash 可以使用的方法之一喔！<br>所以我們可以這樣做：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">basket.each &#123; <span class="params">|i|</span>  p i &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出</span></span><br><span class="line"><span class="comment"># ["apple", 5]</span></span><br><span class="line"><span class="comment"># ["banana", 3]</span></span><br><span class="line"><span class="comment"># ["mango", 4]</span></span><br></pre></td></tr></table></figure><p>你也可以像下面這樣</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basket.each &#123;<span class="params">|k,v|</span> p <span class="string">"Key is <span class="subst">#&#123;k&#125;</span>, Value is <span class="subst">#&#123;v&#125;</span>"</span>&#125;</span><br><span class="line"><span class="comment">#印出</span></span><br><span class="line"><span class="comment">#"Key is apple, Value is 5"</span></span><br><span class="line"><span class="comment">#"Key is banana, Value is 3"</span></span><br><span class="line"><span class="comment">#"Key is mango, Value is 4"</span></span><br></pre></td></tr></table></figure><p>或者，你也可以用 keys 和 values 的方法，只取出其中一項：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">basket.keys</span><br><span class="line"> =&gt; [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"mango"</span>]</span><br><span class="line">basket.values</span><br><span class="line"> =&gt; [<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>好，今天的鐵人賽就到這邊告一個段落，明天見！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day02  流程控制、迴圈與迭代</title>
      <link href="/2019/10/flowcontrol-loop-iteration/"/>
      <url>/2019/10/flowcontrol-loop-iteration/</url>
      
        <content type="html"><![CDATA[<p>昨天講完變數與常數，今天就簡單的介紹一下流程控制、迴圈與迭代吧！<br>主要會針對 Ruby 和其他程式語言不同的地方。</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if…elsif…end"><a href="#if…elsif…end" class="headerlink" title="if…elsif…end"></a>if…elsif…end</h2><blockquote><p> 其他程式語言用的是  else if  ，但是在Ruby是 elsif，別搞錯囉！</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bmi = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18</span></span><br><span class="line">  puts <span class="string">"太瘦了"</span></span><br><span class="line"><span class="keyword">elsif</span> bmi &gt;= <span class="number">18</span> &amp;&amp; bmi &lt;= <span class="number">24</span></span><br><span class="line">  puts <span class="string">"標準身材"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"太胖了"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="倒裝句-將-if-寫在後面"><a href="#倒裝句-將-if-寫在後面" class="headerlink" title="倒裝句 - 將 if  寫在後面"></a>倒裝句 - 將 if  寫在後面</h2><p>將上面的例子簡化：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18</span></span><br><span class="line">  puts <span class="string">"太瘦了"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在Ruby的世界，這種if 區塊裡只有一行的，可以用像英文倒裝句的寫法，寫成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts &quot;太瘦了&quot; if bmi &lt; 18</span><br></pre></td></tr></table></figure><hr><h1 id="迴圈與迭代"><a href="#迴圈與迭代" class="headerlink" title="迴圈與迭代"></a>迴圈與迭代</h1><blockquote><p>迴圈(loop)：設定好要重複的次數或條件，然後執行<br>迭代(interate)：對特定對象，通常是個陣列，的所有元素進行執行</p></blockquote><p>在Ruby 的世界，迴圈的寫法相當多元：</p><ul><li>while loop</li><li>for…in loop</li><li>times/ upto/ downto</li></ul><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h2><p>多數程式語言都有的 while ，在Ruby 裡是寫成這樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> counter &lt; <span class="number">5</span></span><br><span class="line">    puts <span class="string">"hi, <span class="subst">#&#123;counter&#125;</span>"</span></span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="for…in-loop"><a href="#for…in-loop" class="headerlink" title="for…in loop"></a>for…in loop</h2><p>在 Javascript 裡也有的for..in，在Ruby 裡是寫成這樣的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">barks = [<span class="string">"meow"</span>, <span class="string">"won"</span>, <span class="string">"gar"</span>, <span class="string">"ker"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bark <span class="keyword">in</span> barks</span><br><span class="line">  puts bark</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="times-upto-downto"><a href="#times-upto-downto" class="headerlink" title="times/ upto/ downto"></a>times/ upto/ downto</h2><p>還記得昨天提到的，在Ruby的世界，幾乎所有的東西都是物件嗎？<br><del>咦？我還真的沒有提到阿？</del><br>上面提到的這三的方法，都是數字物件可以使用的，寫起來大概會像這樣:</p><ul><li>times<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.times <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"meow"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># meow</span></span><br><span class="line"><span class="comment"># meow</span></span><br><span class="line"><span class="comment"># meow</span></span><br><span class="line"><span class="comment"># meow</span></span><br><span class="line"><span class="comment"># meow</span></span><br></pre></td></tr></table></figure></li><li>upto<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.upto(<span class="number">5</span>) <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  puts <span class="string">"won"</span> * i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#won</span></span><br><span class="line"><span class="comment">#wonwon</span></span><br><span class="line"><span class="comment">#wonwonwon</span></span><br><span class="line"><span class="comment">#wonwonwonwon</span></span><br><span class="line"><span class="comment">#wonwonwonwonwon</span></span><br></pre></td></tr></table></figure></li><li>downto<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.downto(<span class="number">1</span>) <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  puts <span class="string">"gar"</span> * i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#gargargargargar</span></span><br><span class="line"><span class="comment">#gargargargar</span></span><br><span class="line"><span class="comment">#gargargar</span></span><br><span class="line"><span class="comment">#gargar</span></span><br><span class="line"><span class="comment">#gar</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>提到迭代，在處理陣列的時候，其他程式語言大多會想到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> barks = [<span class="string">"meow"</span>, <span class="string">"won"</span>, <span class="string">"gar"</span>, <span class="string">"ker"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; barks.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在Ruby裡，更常使用 each 來處理，寫起來會像這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">barks = [&quot;meow&quot;, &quot;won&quot;, &quot;gar&quot;, &quot;ker&quot;]</span><br><span class="line"></span><br><span class="line">barks.each do |bark|</span><br><span class="line">  puts bark</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>今天的內容好像有點少，是嗎？<br>我絕對不會說是因為我<del>打到一半忘記存檔，<br>自己手賤按了重新整理</del>的關係呢！</p><p>鐵人賽，我們明天見！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day01 變數與常數</title>
      <link href="/2019/10/variables-and-constants/"/>
      <url>/2019/10/variables-and-constants/</url>
      
        <content type="html"><![CDATA[<h1 id="變數與常數"><a href="#變數與常數" class="headerlink" title="變數與常數"></a>變數與常數</h1><h2 id="寫在前面："><a href="#寫在前面：" class="headerlink" title="寫在前面："></a>寫在前面：</h2><p>如果你和我一樣是新手，只是想了解一下 Ruby 寫起來是什麼感覺，<br>我會推薦 <a href="https://repl.it/" target="_blank" rel="noopener">Repl</a> 這個網站。<br>算是線上練習的一個好幫手。</p><p>如果你是想實作或是練習 Rails 的專案：</p><ul><li><p>如果你是Windows 的使用者，那你可以：<br>  1.買一台二手Mac。<br>  2.買一台Mac。<br>  3.買很多台Mac。<del>(I’m not kidding)</del></p><a id="more"></a> <p>謀啦，網路上有很多教學文：找一天比較有空的時候，爬個文，兩三下就搞定！<br><a href="https://blogs.msdn.microsoft.com/microsoft_student_partners_in_taiwan/2017/10/03/wsltune/" target="_blank" rel="noopener">Microsoft - WSL基本安裝</a></p></li><li><p>如果你已經在使用Mac：</p></li></ul><p>那你可以參考下列文章，或是網路上滿滿的教學文，完成環境建置：<br><a href="https://railsbook.tw/chapters/02-environment-setup.html" target="_blank" rel="noopener">為你自己學Ruby on Rails:環境建置篇</a></p><hr><p>咦？看倌您還在啊？正常人在看完上面那段不負責任的環境建置之後，<br>應該都會按下Cmd(Ctrl)+ W 或是 Cmd(Ctrl)+ Q 才是吧？</p><p>好吧…<del>(沒有中招嗎？so sad…)</del></p><p>根據某位授課講師的說法，要掌握一門程式語言要從下列幾東西開始：</p><ul><li>變數</li><li>三種基本型別: String, Integer and Boolean</li><li>兩種集合型別: Array and Hash</li><li>函式</li><li>分支條件與迴圈</li><li>變數作用域</li></ul><p>所以，就先從變數(Variables)和常數(Constants)開始吧！</p><hr><h1 id="變數-Variables"><a href="#變數-Variables" class="headerlink" title="變數(Variables)"></a>變數(Variables)</h1><p>Ruby 中的變數共有以下四種：<br>type    | sample |identifier |<br>——  | —— | ——– |<br>區域變數 | name   | 非大寫字母開頭 |<br>全域區域 | $name  | $開頭 |<br>實體變數 | @name  | @開頭 |<br>類別變數 | @@name | @@開頭 |</p><blockquote><p>只有  全域變數 和 實體變數  有預設值 nil。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="variable">$name</span></span><br><span class="line">=&gt; nil</span><br><span class="line">puts @name</span><br><span class="line">=&gt; nil</span><br><span class="line">puts name</span><br><span class="line">=&gt; (undefined <span class="built_in">local</span> variable or method `name` <span class="keyword">for</span> main:Object)</span><br><span class="line">puts @@name</span><br><span class="line">=&gt; (uninitialized class variable @@name <span class="keyword">in</span> Object)</span><br></pre></td></tr></table></figure><hr><h1 id="常數-Constants"><a href="#常數-Constants" class="headerlink" title="常數(Constants)"></a>常數(Constants)</h1><p>Ruby對常數的要求只有一點：</p><blockquote><p>常數的命名開頭要是英文字母大寫。</p></blockquote><p>下面的例子裡，就有兩個常數 Foo 和 Bar。<br>沒錯，常見的類別(class)名稱，必須要是常數才行喔！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line">    Bar</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="虛擬變數-pseudo-variable"><a href="#虛擬變數-pseudo-variable" class="headerlink" title="虛擬變數(pseudo_variable)"></a>虛擬變數(pseudo_variable)</h2><p>常用的虛擬變數有</p><ul><li>self : 呼叫方法的物件(The receiver object of the current method.)</li><li>nil :  代表還沒有被設定值 (Undefined)</li><li>true : 代表 True</li><li>false : 代表 False</li></ul><blockquote><p>虛擬變數算是比較特別的一群：<br>他們通常被當作像區域變數那樣來使用，但是無法被assign任何值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self = <span class="string">'hahaha'</span></span><br><span class="line">=&gt; SyntaxError (Can<span class="string">'t change the value of self)</span></span><br><span class="line"><span class="string">nil = 18</span></span><br><span class="line"><span class="string">=&gt; SyntaxError (Can'</span>t assign to nil)</span><br><span class="line"><span class="literal">true</span> = <span class="literal">false</span></span><br><span class="line">=&gt; SyntaxError (Can<span class="string">'t assign to true)</span></span><br></pre></td></tr></table></figure><hr><p>同場加映：</p><p> 在練習Ruby的時候，通常我們會習慣用 p 和 puts 把結果印出來，像是下面這樣：</p><ul><li><p>印出字串</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> p <span class="string">'this is a string'</span></span><br><span class="line"><span class="string">"this is a string"</span></span><br><span class="line"> =&gt; <span class="string">"this is a string"</span></span><br><span class="line"> </span><br><span class="line"> puts <span class="string">'this is a string'</span></span><br><span class="line">this is a string</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure><ul><li>印出整數<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> p <span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"> =&gt; <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"> puts <span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure></li></ul></li><li><p>印出Boolean</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> p <span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"> =&gt; true</span><br><span class="line"></span><br><span class="line">puts <span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure></li><li><p>試著印出 nil </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p <span class="literal">nil</span></span><br><span class="line"><span class="literal">nil</span></span><br><span class="line"> =&gt; nil</span><br><span class="line">puts <span class="literal">nil</span></span><br><span class="line">    <span class="comment">#是真的沒有東西，不是沒有打字喔！</span></span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure></li></ul><p>p 和 puts 都能幫我們印出結果，但是印出的內容不太一樣喔！<br>這個符號 <strong>=&gt;</strong>，在 Ruby是叫做 “回傳值” 的概念，暫時先有印象就好。<br>目前只需要知道：</p><ul><li>p 可以幫我們印出物件(object)本身，並回傳物件本身的值(value)</li><li>puts 則是會把物件轉換成字串印出來。<pre><code>就算是nil 也會被轉成空的字串“”，所以才會印出空白喔。</code></pre></li></ul><p>其實還有一個print，不過因為對他沒有愛，就這樣吧！</p><p>如果想進一步了解的話，可以參考下面連結：</p><p><a href="https://railsbook.tw/chapters/05-ruby-basic-1.html" target="_blank" rel="noopener">為你自己學 Ruby on Rails： 變數、常數、流程控制、迴圈</a><br><a href="https://www.garethrees.co.uk/2013/05/04/p-vs-puts-vs-print-in-ruby/" target="_blank" rel="noopener">Ruby p vs puts vs print</a><br><a href="https://www.rubyguides.com/2018/10/puts-vs-print/" target="_blank" rel="noopener">Understanding The Differences Between Puts, Print &amp; P</a></p><p>鐵人賽第一天，就先這樣囉！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby and Rails 的二三事 </tag>
            
            <tag> 11th鐵人賽 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
